/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
	"github.com/shopspring/decimal"
)

// checks if the TransactionModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionModel{}

// TransactionModel Transactions are represented by the `transaction` object. The Marqeta platform creates a separate `transaction` object for each transaction message received from the card network. The attributes of a given `transaction` object depend on the transaction type.  This section documents all fields that might be included in a `transaction` object.
type TransactionModel struct {
	AccountFunding *AccountFunding `json:"account_funding,omitempty"`
	AccountNameVerification *AccountNameVerificationModel `json:"account_name_verification,omitempty"`
	Acquirer *Acquirer `json:"acquirer,omitempty"`
	// Indicates the amount of the acquirer fee. Account holders are sometimes charged an acquirer fee for card use at ATMs, fuel dispensers, and so on.
	AcquirerFeeAmount *decimal.Decimal `json:"acquirer_fee_amount,omitempty"`
	AcquirerReferenceData *string `json:"acquirer_reference_data,omitempty"`
	// Acquirer-assigned unique identifier of the transaction. Useful for settlement and reconciliation.
	AcquirerReferenceId *string `json:"acquirer_reference_id,omitempty"`
	// Unique identifier of the user who conducted the transaction. This might be a child user configured to share its parent's account balance.
	ActingUserToken string `json:"acting_user_token"`
	AddressVerification *AddressVerificationModel `json:"address_verification,omitempty"`
	AdviceReasonCode *string `json:"advice_reason_code,omitempty"`
	AdviceReasonDetails *string `json:"advice_reason_details,omitempty"`
	// Amount of the transaction.
	Amount decimal.Decimal `json:"amount"`
	// Amount of original authorization to be released. This field appears in final clearing transactions where the clearing amount is lower than the authorization amount.
	AmountToBeReleased *decimal.Decimal `json:"amount_to_be_released,omitempty"`
	// Unique identifier assigned to an authorization, printed on the receipt at point of sale.
	ApprovalCode *string `json:"approval_code,omitempty"`
	AtcInformation *AtcInformation `json:"atc_information,omitempty"`
	AutoReload *AutoReloadModel `json:"auto_reload,omitempty"`
	BankTransferToken *string `json:"bank_transfer_token,omitempty"`
	// The batch number of the transaction.
	BatchNumber *string `json:"batch_number,omitempty"`
	Billpay *BillPayResponse `json:"billpay,omitempty"`
	Business *BusinessMetadata `json:"business,omitempty"`
	// Unique identifier of the business that owns the account that funded the transaction.
	BusinessToken *string `json:"business_token,omitempty"`
	Card *CardResponse `json:"card,omitempty"`
	CardAcceptor *TransactionCardAcceptor `json:"card_acceptor,omitempty"`
	CardHolderModel *UserCardHolderResponse `json:"card_holder_model,omitempty"`
	// Unique identifier of the card product.
	CardProductToken *string `json:"card_product_token,omitempty"`
	CardSecurityCodeVerification *CardSecurityCodeVerification `json:"card_security_code_verification,omitempty"`
	// Unique identifier of the card. Useful when a single account holder has multiple cards.
	CardToken *string `json:"card_token,omitempty"`
	CardholderAuthenticationData *CardholderAuthenticationData `json:"cardholder_authentication_data,omitempty"`
	// Amount of cash back requested by the cardholder during the transaction. Included in the total transaction amount.
	CashBackAmount *decimal.Decimal `json:"cash_back_amount,omitempty"`
	Chargeback *ChargebackResponse `json:"chargeback,omitempty"`
	// A sequence number that identifies a specific clearing message among multiple clearing messages for an authorization.
	ClearingRecordSequenceNumber *string `json:"clearing_record_sequence_number,omitempty"`
	// Date and time when the Marqeta platform created the transaction entry, in UTC format. For example, when Marqeta processed the clearing record for a refund.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Currency type of the transaction.
	CurrencyCode *string `json:"currency_code,omitempty"`
	CurrencyConversion *CurrencyConversion `json:"currency_conversion,omitempty"`
	DeferredSettlementDays *string `json:"deferred_settlement_days,omitempty"`
	DigitalWalletToken *DigitalWalletToken `json:"digital_wallet_token,omitempty"`
	DigitalWalletTokenTransactionServiceProviderInfo *DigitalServiceProvider `json:"digital_wallet_token_transaction_service_provider_info,omitempty"`
	DirectDeposit *DepositDepositResponse `json:"direct_deposit,omitempty"`
	Dispute *DisputeModel `json:"dispute,omitempty"`
	// Duration of the transaction on Marqeta's servers, in milliseconds.
	Duration *int32 `json:"duration,omitempty"`
	// The enhanced commercial card data token for the transaction.
	EnhancedDataToken *string `json:"enhanced_data_token,omitempty"`
	Fee *Fee `json:"fee,omitempty"`
	FeeTransfer *FeeTransferResponse `json:"fee_transfer,omitempty"`
	// List of fees associated with the transaction.  This array is returned if it exists in the resource.
	Fees []NetworkFeeModel `json:"fees,omitempty"`
	Fraud *FraudView `json:"fraud,omitempty"`
	// Specifies the account type for ATM transactions.
	FromAccount *string `json:"from_account,omitempty"`
	Gpa *CardholderBalance `json:"gpa,omitempty"`
	GpaOrder *GpaResponse `json:"gpa_order,omitempty"`
	GpaOrderUnload *GpaReturns `json:"gpa_order_unload,omitempty"`
	// Sequential identifier of the transaction.
	Identifier *string `json:"identifier,omitempty"`
	// An array of incremental authorization transaction tokens.
	IncrementalAuthorizationTransactionTokens []string `json:"incremental_authorization_transaction_tokens,omitempty"`
	InterchangeRateDescriptor *string `json:"interchange_rate_descriptor,omitempty"`
	// Indicates the final clearing event for an authorization. If the final cleared amount is lower than the authorized amount, you must release the hold on the funds per the value in the `amount_to_be_released` field.
	IsFinalClearing *bool `json:"is_final_clearing,omitempty"`
	// Indicates if the transaction is a pre-authorization.
	IsPreauthorization *bool `json:"is_preauthorization,omitempty"`
	// The international service assessment indicator indicates if an ISA fee is applicable to the transaction.
	IsaIndicator *string `json:"isaIndicator,omitempty"`
	// The amount of interchange charged by the card issuer.
	IssuerInterchangeAmount *decimal.Decimal `json:"issuer_interchange_amount,omitempty"`
	// Unique identifier of the Marqeta platform server that received the transaction from the card network.
	IssuerPaymentNode *string `json:"issuer_payment_node,omitempty"`
	// Date and time when the Marqeta platform received the transaction from the card network, in UTC.
	IssuerReceivedTime *string `json:"issuer_received_time,omitempty"`
	// Indicates the local time of the transaction at the card acceptor's location. You can use this field to determine the correct time of the transaction when filing a dispute.
	LocalTransactionDate *time.Time `json:"local_transaction_date,omitempty"`
	Merchant *MerchantResponseModel `json:"merchant,omitempty"`
	// Unique network identification value formed by combining the 6- to 9-character Mastercard Banknet Reference Number and the 4-digit settlement date for recurring payments and other merchant-initiated transactions.
	MerchantInitiatedOriginalTraceId *string `json:"merchant_initiated_original_trace_id,omitempty"`
	MsaOrderUnload *MsaReturns `json:"msa_order_unload,omitempty"`
	// If an authorization has multiple clearing transactions, this field displays their total number. For example, if an authorization has four clearing transactions, the sequence count is `04`.
	MultiClearingSequenceCount *string `json:"multi_clearing_sequence_count,omitempty"`
	// If an authorization has multiple clearing transactions, this field displays the sequence number for the clearing transaction. For example, if this is the second clearing transaction of four, the sequence number is `02`.
	MultiClearingSequenceNumber *string `json:"multi_clearing_sequence_number,omitempty"`
	NationalNetCpdOfOriginal *string `json:"national_net_cpd_of_original,omitempty"`
	// Indicates which card network was used to complete the transactions.
	Network *string `json:"network,omitempty"`
	NetworkMetadata *NetworkMetadata `json:"network_metadata,omitempty"`
	// Network-assigned unique identifier of the transaction. Useful for settlement and reconciliation.
	NetworkReferenceId *string `json:"network_reference_id,omitempty"`
	OriginalCredit *OriginalCredit `json:"original_credit,omitempty"`
	PeerTransfer *PeerTransferResponse `json:"peer_transfer,omitempty"`
	// Indicates whether the transaction is credit or debit.
	Polarity *string `json:"polarity,omitempty"`
	Pos *Pos `json:"pos,omitempty"`
	// Returned for final transaction types.  Unique identifier of the preceding related transaction. Useful for identifying the transaction that preceded the current one.  For example, `authorization`, a temporary transaction type, precedes and is completed by `authorization.clearing`, a final transaction type. In this case, the `authorization` token is returned with this field. For which transaction types are temporary or final, see <</core-api/event-types#_transaction_events, Transaction events in Event Types>>.
	PrecedingRelatedTransactionToken *string `json:"preceding_related_transaction_token,omitempty"`
	PrecedingTransaction *PrecedingTransaction `json:"preceding_transaction,omitempty"`
	Program *Program `json:"program,omitempty"`
	ProgramTransfer *ProgramTransferResponse `json:"program_transfer,omitempty"`
	RealTimeFeeGroup *RealTimeFeeGroup `json:"real_time_fee_group,omitempty"`
	// Merchant-requested amount, including any fees.
	RequestAmount *decimal.Decimal `json:"request_amount,omitempty"`
	Response *Response `json:"response,omitempty"`
	// Date and time when funds were moved for a transaction, in UTC. For example, in the case of a refund, when funds were credited to the cardholder.
	SettlementDate *time.Time `json:"settlement_date,omitempty"`
	// Indicates the settlement service used for the transaction.
	SettlementIndicator *string `json:"settlement_indicator,omitempty"`
	// Indicates which party approved a transaction: the card network using stand-in processing, or Marqeta using Commando Mode. Returned only when a transaction is approved.
	StandinApprovedBy *string `json:"standin_approved_by,omitempty"`
	// Indicates which party approved a transaction: the card network using stand-in processing, or Marqeta using Commando Mode.
	StandinBy *string `json:"standin_by,omitempty"`
	// Indicates why the card network handled a transaction requiring stand-in processing.
	StandinReason *string `json:"standin_reason,omitempty"`
	// Current state of the transaction. For more information about the `state` field, see <</developer-guides/about-transactions#_the_transaction_lifecycle, The transaction lifecycle>>.
	State string `json:"state"`
	Store *StoreResponseModel `json:"store,omitempty"`
	// Indicates which subnetwork was used to complete the transaction. Possible values include the following:  * *VISANET* – Used for VisaNet signature-based transactions. * *VISANETDEBIT* – Used for VisaNet Debit PIN-based transaction. * *VISAINTERLINK* – Used for Visa Interlink PIN-based transactions. * *VISAPLUS* – Used for ATM withdrawals on Visa. * *MAESTRO* – Used for PIN-based transactions on Mastercard. * *CIRRUS* – Used for ATM withdrawals on Mastercard. * *MASTERCARDDEBIT* – Used for signature-based transactions on Mastercard. * *GATEWAY_JIT* – Used for Gateway JIT Funding transactions. * *MANAGED_JIT* – Used for Managed JIT Funding transactions or for transactions that occur while Commando Mode is enabled.
	Subnetwork *string `json:"subnetwork,omitempty"`
	// Unique identifier of the transaction, formatted as a UUID.  *NOTE:* For subsequent related transactions, this token value appears as the `preceding_related_transaction_token`.
	Token string `json:"token"`
	// Additional transaction attributes.
	TransactionAttributes *map[string]string `json:"transaction_attributes,omitempty"`
	TransactionMetadata *TransactionMetadata `json:"transaction_metadata,omitempty"`
	// Transaction event type. For more information about the `type` field, see <</core-api/event-types#_transaction_events, Transaction events>>.
	Type string `json:"type"`
	User *CardholderMetadata `json:"user,omitempty"`
	// Unique identifier of the user who owns the account that funded the transaction; subsequent related transactions retain the same `user_token`, even if the card used to complete the transaction moves to another user.
	UserToken *string `json:"user_token,omitempty"`
	// Date and time when the user initiated the transaction, in UTC. For example, when a merchant performed the original authorization for a refund.
	UserTransactionTime *time.Time `json:"user_transaction_time,omitempty"`
}

type _TransactionModel TransactionModel

// NewTransactionModel instantiates a new TransactionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionModel(actingUserToken string, amount decimal.Decimal, state string, token string, type_ string) *TransactionModel {
	this := TransactionModel{}
	this.ActingUserToken = actingUserToken
	this.Amount = amount
	var isPreauthorization bool = false
	this.IsPreauthorization = &isPreauthorization
	this.State = state
	this.Token = token
	this.Type = type_
	return &this
}

// NewTransactionModelWithDefaults instantiates a new TransactionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionModelWithDefaults() *TransactionModel {
	this := TransactionModel{}
	var isPreauthorization bool = false
	this.IsPreauthorization = &isPreauthorization
	return &this
}

// GetAccountFunding returns the AccountFunding field value if set, zero value otherwise.
func (o *TransactionModel) GetAccountFunding() AccountFunding {
	if o == nil || IsNil(o.AccountFunding) {
		var ret AccountFunding
		return ret
	}
	return *o.AccountFunding
}

// GetAccountFundingOk returns a tuple with the AccountFunding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAccountFundingOk() (*AccountFunding, bool) {
	if o == nil || IsNil(o.AccountFunding) {
		return nil, false
	}
	return o.AccountFunding, true
}

// HasAccountFunding returns a boolean if a field has been set.
func (o *TransactionModel) HasAccountFunding() bool {
	if o != nil && !IsNil(o.AccountFunding) {
		return true
	}

	return false
}

// SetAccountFunding gets a reference to the given AccountFunding and assigns it to the AccountFunding field.
func (o *TransactionModel) SetAccountFunding(v AccountFunding) {
	o.AccountFunding = &v
}

// GetAccountNameVerification returns the AccountNameVerification field value if set, zero value otherwise.
func (o *TransactionModel) GetAccountNameVerification() AccountNameVerificationModel {
	if o == nil || IsNil(o.AccountNameVerification) {
		var ret AccountNameVerificationModel
		return ret
	}
	return *o.AccountNameVerification
}

// GetAccountNameVerificationOk returns a tuple with the AccountNameVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAccountNameVerificationOk() (*AccountNameVerificationModel, bool) {
	if o == nil || IsNil(o.AccountNameVerification) {
		return nil, false
	}
	return o.AccountNameVerification, true
}

// HasAccountNameVerification returns a boolean if a field has been set.
func (o *TransactionModel) HasAccountNameVerification() bool {
	if o != nil && !IsNil(o.AccountNameVerification) {
		return true
	}

	return false
}

// SetAccountNameVerification gets a reference to the given AccountNameVerificationModel and assigns it to the AccountNameVerification field.
func (o *TransactionModel) SetAccountNameVerification(v AccountNameVerificationModel) {
	o.AccountNameVerification = &v
}

// GetAcquirer returns the Acquirer field value if set, zero value otherwise.
func (o *TransactionModel) GetAcquirer() Acquirer {
	if o == nil || IsNil(o.Acquirer) {
		var ret Acquirer
		return ret
	}
	return *o.Acquirer
}

// GetAcquirerOk returns a tuple with the Acquirer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAcquirerOk() (*Acquirer, bool) {
	if o == nil || IsNil(o.Acquirer) {
		return nil, false
	}
	return o.Acquirer, true
}

// HasAcquirer returns a boolean if a field has been set.
func (o *TransactionModel) HasAcquirer() bool {
	if o != nil && !IsNil(o.Acquirer) {
		return true
	}

	return false
}

// SetAcquirer gets a reference to the given Acquirer and assigns it to the Acquirer field.
func (o *TransactionModel) SetAcquirer(v Acquirer) {
	o.Acquirer = &v
}

// GetAcquirerFeeAmount returns the AcquirerFeeAmount field value if set, zero value otherwise.
func (o *TransactionModel) GetAcquirerFeeAmount() decimal.Decimal {
	if o == nil || IsNil(o.AcquirerFeeAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.AcquirerFeeAmount
}

// GetAcquirerFeeAmountOk returns a tuple with the AcquirerFeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAcquirerFeeAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.AcquirerFeeAmount) {
		return nil, false
	}
	return o.AcquirerFeeAmount, true
}

// HasAcquirerFeeAmount returns a boolean if a field has been set.
func (o *TransactionModel) HasAcquirerFeeAmount() bool {
	if o != nil && !IsNil(o.AcquirerFeeAmount) {
		return true
	}

	return false
}

// SetAcquirerFeeAmount gets a reference to the given decimal.Decimal and assigns it to the AcquirerFeeAmount field.
func (o *TransactionModel) SetAcquirerFeeAmount(v decimal.Decimal) {
	o.AcquirerFeeAmount = &v
}

// GetAcquirerReferenceData returns the AcquirerReferenceData field value if set, zero value otherwise.
func (o *TransactionModel) GetAcquirerReferenceData() string {
	if o == nil || IsNil(o.AcquirerReferenceData) {
		var ret string
		return ret
	}
	return *o.AcquirerReferenceData
}

// GetAcquirerReferenceDataOk returns a tuple with the AcquirerReferenceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAcquirerReferenceDataOk() (*string, bool) {
	if o == nil || IsNil(o.AcquirerReferenceData) {
		return nil, false
	}
	return o.AcquirerReferenceData, true
}

// HasAcquirerReferenceData returns a boolean if a field has been set.
func (o *TransactionModel) HasAcquirerReferenceData() bool {
	if o != nil && !IsNil(o.AcquirerReferenceData) {
		return true
	}

	return false
}

// SetAcquirerReferenceData gets a reference to the given string and assigns it to the AcquirerReferenceData field.
func (o *TransactionModel) SetAcquirerReferenceData(v string) {
	o.AcquirerReferenceData = &v
}

// GetAcquirerReferenceId returns the AcquirerReferenceId field value if set, zero value otherwise.
func (o *TransactionModel) GetAcquirerReferenceId() string {
	if o == nil || IsNil(o.AcquirerReferenceId) {
		var ret string
		return ret
	}
	return *o.AcquirerReferenceId
}

// GetAcquirerReferenceIdOk returns a tuple with the AcquirerReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAcquirerReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.AcquirerReferenceId) {
		return nil, false
	}
	return o.AcquirerReferenceId, true
}

// HasAcquirerReferenceId returns a boolean if a field has been set.
func (o *TransactionModel) HasAcquirerReferenceId() bool {
	if o != nil && !IsNil(o.AcquirerReferenceId) {
		return true
	}

	return false
}

// SetAcquirerReferenceId gets a reference to the given string and assigns it to the AcquirerReferenceId field.
func (o *TransactionModel) SetAcquirerReferenceId(v string) {
	o.AcquirerReferenceId = &v
}

// GetActingUserToken returns the ActingUserToken field value
func (o *TransactionModel) GetActingUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActingUserToken
}

// GetActingUserTokenOk returns a tuple with the ActingUserToken field value
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetActingUserTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActingUserToken, true
}

// SetActingUserToken sets field value
func (o *TransactionModel) SetActingUserToken(v string) {
	o.ActingUserToken = v
}

// GetAddressVerification returns the AddressVerification field value if set, zero value otherwise.
func (o *TransactionModel) GetAddressVerification() AddressVerificationModel {
	if o == nil || IsNil(o.AddressVerification) {
		var ret AddressVerificationModel
		return ret
	}
	return *o.AddressVerification
}

// GetAddressVerificationOk returns a tuple with the AddressVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAddressVerificationOk() (*AddressVerificationModel, bool) {
	if o == nil || IsNil(o.AddressVerification) {
		return nil, false
	}
	return o.AddressVerification, true
}

// HasAddressVerification returns a boolean if a field has been set.
func (o *TransactionModel) HasAddressVerification() bool {
	if o != nil && !IsNil(o.AddressVerification) {
		return true
	}

	return false
}

// SetAddressVerification gets a reference to the given AddressVerificationModel and assigns it to the AddressVerification field.
func (o *TransactionModel) SetAddressVerification(v AddressVerificationModel) {
	o.AddressVerification = &v
}

// GetAdviceReasonCode returns the AdviceReasonCode field value if set, zero value otherwise.
func (o *TransactionModel) GetAdviceReasonCode() string {
	if o == nil || IsNil(o.AdviceReasonCode) {
		var ret string
		return ret
	}
	return *o.AdviceReasonCode
}

// GetAdviceReasonCodeOk returns a tuple with the AdviceReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAdviceReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AdviceReasonCode) {
		return nil, false
	}
	return o.AdviceReasonCode, true
}

// HasAdviceReasonCode returns a boolean if a field has been set.
func (o *TransactionModel) HasAdviceReasonCode() bool {
	if o != nil && !IsNil(o.AdviceReasonCode) {
		return true
	}

	return false
}

// SetAdviceReasonCode gets a reference to the given string and assigns it to the AdviceReasonCode field.
func (o *TransactionModel) SetAdviceReasonCode(v string) {
	o.AdviceReasonCode = &v
}

// GetAdviceReasonDetails returns the AdviceReasonDetails field value if set, zero value otherwise.
func (o *TransactionModel) GetAdviceReasonDetails() string {
	if o == nil || IsNil(o.AdviceReasonDetails) {
		var ret string
		return ret
	}
	return *o.AdviceReasonDetails
}

// GetAdviceReasonDetailsOk returns a tuple with the AdviceReasonDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAdviceReasonDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.AdviceReasonDetails) {
		return nil, false
	}
	return o.AdviceReasonDetails, true
}

// HasAdviceReasonDetails returns a boolean if a field has been set.
func (o *TransactionModel) HasAdviceReasonDetails() bool {
	if o != nil && !IsNil(o.AdviceReasonDetails) {
		return true
	}

	return false
}

// SetAdviceReasonDetails gets a reference to the given string and assigns it to the AdviceReasonDetails field.
func (o *TransactionModel) SetAdviceReasonDetails(v string) {
	o.AdviceReasonDetails = &v
}

// GetAmount returns the Amount field value
func (o *TransactionModel) GetAmount() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAmountOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionModel) SetAmount(v decimal.Decimal) {
	o.Amount = v
}

// GetAmountToBeReleased returns the AmountToBeReleased field value if set, zero value otherwise.
func (o *TransactionModel) GetAmountToBeReleased() decimal.Decimal {
	if o == nil || IsNil(o.AmountToBeReleased) {
		var ret decimal.Decimal
		return ret
	}
	return *o.AmountToBeReleased
}

// GetAmountToBeReleasedOk returns a tuple with the AmountToBeReleased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAmountToBeReleasedOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.AmountToBeReleased) {
		return nil, false
	}
	return o.AmountToBeReleased, true
}

// HasAmountToBeReleased returns a boolean if a field has been set.
func (o *TransactionModel) HasAmountToBeReleased() bool {
	if o != nil && !IsNil(o.AmountToBeReleased) {
		return true
	}

	return false
}

// SetAmountToBeReleased gets a reference to the given decimal.Decimal and assigns it to the AmountToBeReleased field.
func (o *TransactionModel) SetAmountToBeReleased(v decimal.Decimal) {
	o.AmountToBeReleased = &v
}

// GetApprovalCode returns the ApprovalCode field value if set, zero value otherwise.
func (o *TransactionModel) GetApprovalCode() string {
	if o == nil || IsNil(o.ApprovalCode) {
		var ret string
		return ret
	}
	return *o.ApprovalCode
}

// GetApprovalCodeOk returns a tuple with the ApprovalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetApprovalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalCode) {
		return nil, false
	}
	return o.ApprovalCode, true
}

// HasApprovalCode returns a boolean if a field has been set.
func (o *TransactionModel) HasApprovalCode() bool {
	if o != nil && !IsNil(o.ApprovalCode) {
		return true
	}

	return false
}

// SetApprovalCode gets a reference to the given string and assigns it to the ApprovalCode field.
func (o *TransactionModel) SetApprovalCode(v string) {
	o.ApprovalCode = &v
}

// GetAtcInformation returns the AtcInformation field value if set, zero value otherwise.
func (o *TransactionModel) GetAtcInformation() AtcInformation {
	if o == nil || IsNil(o.AtcInformation) {
		var ret AtcInformation
		return ret
	}
	return *o.AtcInformation
}

// GetAtcInformationOk returns a tuple with the AtcInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAtcInformationOk() (*AtcInformation, bool) {
	if o == nil || IsNil(o.AtcInformation) {
		return nil, false
	}
	return o.AtcInformation, true
}

// HasAtcInformation returns a boolean if a field has been set.
func (o *TransactionModel) HasAtcInformation() bool {
	if o != nil && !IsNil(o.AtcInformation) {
		return true
	}

	return false
}

// SetAtcInformation gets a reference to the given AtcInformation and assigns it to the AtcInformation field.
func (o *TransactionModel) SetAtcInformation(v AtcInformation) {
	o.AtcInformation = &v
}

// GetAutoReload returns the AutoReload field value if set, zero value otherwise.
func (o *TransactionModel) GetAutoReload() AutoReloadModel {
	if o == nil || IsNil(o.AutoReload) {
		var ret AutoReloadModel
		return ret
	}
	return *o.AutoReload
}

// GetAutoReloadOk returns a tuple with the AutoReload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAutoReloadOk() (*AutoReloadModel, bool) {
	if o == nil || IsNil(o.AutoReload) {
		return nil, false
	}
	return o.AutoReload, true
}

// HasAutoReload returns a boolean if a field has been set.
func (o *TransactionModel) HasAutoReload() bool {
	if o != nil && !IsNil(o.AutoReload) {
		return true
	}

	return false
}

// SetAutoReload gets a reference to the given AutoReloadModel and assigns it to the AutoReload field.
func (o *TransactionModel) SetAutoReload(v AutoReloadModel) {
	o.AutoReload = &v
}

// GetBankTransferToken returns the BankTransferToken field value if set, zero value otherwise.
func (o *TransactionModel) GetBankTransferToken() string {
	if o == nil || IsNil(o.BankTransferToken) {
		var ret string
		return ret
	}
	return *o.BankTransferToken
}

// GetBankTransferTokenOk returns a tuple with the BankTransferToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetBankTransferTokenOk() (*string, bool) {
	if o == nil || IsNil(o.BankTransferToken) {
		return nil, false
	}
	return o.BankTransferToken, true
}

// HasBankTransferToken returns a boolean if a field has been set.
func (o *TransactionModel) HasBankTransferToken() bool {
	if o != nil && !IsNil(o.BankTransferToken) {
		return true
	}

	return false
}

// SetBankTransferToken gets a reference to the given string and assigns it to the BankTransferToken field.
func (o *TransactionModel) SetBankTransferToken(v string) {
	o.BankTransferToken = &v
}

// GetBatchNumber returns the BatchNumber field value if set, zero value otherwise.
func (o *TransactionModel) GetBatchNumber() string {
	if o == nil || IsNil(o.BatchNumber) {
		var ret string
		return ret
	}
	return *o.BatchNumber
}

// GetBatchNumberOk returns a tuple with the BatchNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetBatchNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BatchNumber) {
		return nil, false
	}
	return o.BatchNumber, true
}

// HasBatchNumber returns a boolean if a field has been set.
func (o *TransactionModel) HasBatchNumber() bool {
	if o != nil && !IsNil(o.BatchNumber) {
		return true
	}

	return false
}

// SetBatchNumber gets a reference to the given string and assigns it to the BatchNumber field.
func (o *TransactionModel) SetBatchNumber(v string) {
	o.BatchNumber = &v
}

// GetBillpay returns the Billpay field value if set, zero value otherwise.
func (o *TransactionModel) GetBillpay() BillPayResponse {
	if o == nil || IsNil(o.Billpay) {
		var ret BillPayResponse
		return ret
	}
	return *o.Billpay
}

// GetBillpayOk returns a tuple with the Billpay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetBillpayOk() (*BillPayResponse, bool) {
	if o == nil || IsNil(o.Billpay) {
		return nil, false
	}
	return o.Billpay, true
}

// HasBillpay returns a boolean if a field has been set.
func (o *TransactionModel) HasBillpay() bool {
	if o != nil && !IsNil(o.Billpay) {
		return true
	}

	return false
}

// SetBillpay gets a reference to the given BillPayResponse and assigns it to the Billpay field.
func (o *TransactionModel) SetBillpay(v BillPayResponse) {
	o.Billpay = &v
}

// GetBusiness returns the Business field value if set, zero value otherwise.
func (o *TransactionModel) GetBusiness() BusinessMetadata {
	if o == nil || IsNil(o.Business) {
		var ret BusinessMetadata
		return ret
	}
	return *o.Business
}

// GetBusinessOk returns a tuple with the Business field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetBusinessOk() (*BusinessMetadata, bool) {
	if o == nil || IsNil(o.Business) {
		return nil, false
	}
	return o.Business, true
}

// HasBusiness returns a boolean if a field has been set.
func (o *TransactionModel) HasBusiness() bool {
	if o != nil && !IsNil(o.Business) {
		return true
	}

	return false
}

// SetBusiness gets a reference to the given BusinessMetadata and assigns it to the Business field.
func (o *TransactionModel) SetBusiness(v BusinessMetadata) {
	o.Business = &v
}

// GetBusinessToken returns the BusinessToken field value if set, zero value otherwise.
func (o *TransactionModel) GetBusinessToken() string {
	if o == nil || IsNil(o.BusinessToken) {
		var ret string
		return ret
	}
	return *o.BusinessToken
}

// GetBusinessTokenOk returns a tuple with the BusinessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetBusinessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessToken) {
		return nil, false
	}
	return o.BusinessToken, true
}

// HasBusinessToken returns a boolean if a field has been set.
func (o *TransactionModel) HasBusinessToken() bool {
	if o != nil && !IsNil(o.BusinessToken) {
		return true
	}

	return false
}

// SetBusinessToken gets a reference to the given string and assigns it to the BusinessToken field.
func (o *TransactionModel) SetBusinessToken(v string) {
	o.BusinessToken = &v
}

// GetCard returns the Card field value if set, zero value otherwise.
func (o *TransactionModel) GetCard() CardResponse {
	if o == nil || IsNil(o.Card) {
		var ret CardResponse
		return ret
	}
	return *o.Card
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCardOk() (*CardResponse, bool) {
	if o == nil || IsNil(o.Card) {
		return nil, false
	}
	return o.Card, true
}

// HasCard returns a boolean if a field has been set.
func (o *TransactionModel) HasCard() bool {
	if o != nil && !IsNil(o.Card) {
		return true
	}

	return false
}

// SetCard gets a reference to the given CardResponse and assigns it to the Card field.
func (o *TransactionModel) SetCard(v CardResponse) {
	o.Card = &v
}

// GetCardAcceptor returns the CardAcceptor field value if set, zero value otherwise.
func (o *TransactionModel) GetCardAcceptor() TransactionCardAcceptor {
	if o == nil || IsNil(o.CardAcceptor) {
		var ret TransactionCardAcceptor
		return ret
	}
	return *o.CardAcceptor
}

// GetCardAcceptorOk returns a tuple with the CardAcceptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCardAcceptorOk() (*TransactionCardAcceptor, bool) {
	if o == nil || IsNil(o.CardAcceptor) {
		return nil, false
	}
	return o.CardAcceptor, true
}

// HasCardAcceptor returns a boolean if a field has been set.
func (o *TransactionModel) HasCardAcceptor() bool {
	if o != nil && !IsNil(o.CardAcceptor) {
		return true
	}

	return false
}

// SetCardAcceptor gets a reference to the given TransactionCardAcceptor and assigns it to the CardAcceptor field.
func (o *TransactionModel) SetCardAcceptor(v TransactionCardAcceptor) {
	o.CardAcceptor = &v
}

// GetCardHolderModel returns the CardHolderModel field value if set, zero value otherwise.
func (o *TransactionModel) GetCardHolderModel() UserCardHolderResponse {
	if o == nil || IsNil(o.CardHolderModel) {
		var ret UserCardHolderResponse
		return ret
	}
	return *o.CardHolderModel
}

// GetCardHolderModelOk returns a tuple with the CardHolderModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCardHolderModelOk() (*UserCardHolderResponse, bool) {
	if o == nil || IsNil(o.CardHolderModel) {
		return nil, false
	}
	return o.CardHolderModel, true
}

// HasCardHolderModel returns a boolean if a field has been set.
func (o *TransactionModel) HasCardHolderModel() bool {
	if o != nil && !IsNil(o.CardHolderModel) {
		return true
	}

	return false
}

// SetCardHolderModel gets a reference to the given UserCardHolderResponse and assigns it to the CardHolderModel field.
func (o *TransactionModel) SetCardHolderModel(v UserCardHolderResponse) {
	o.CardHolderModel = &v
}

// GetCardProductToken returns the CardProductToken field value if set, zero value otherwise.
func (o *TransactionModel) GetCardProductToken() string {
	if o == nil || IsNil(o.CardProductToken) {
		var ret string
		return ret
	}
	return *o.CardProductToken
}

// GetCardProductTokenOk returns a tuple with the CardProductToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCardProductTokenOk() (*string, bool) {
	if o == nil || IsNil(o.CardProductToken) {
		return nil, false
	}
	return o.CardProductToken, true
}

// HasCardProductToken returns a boolean if a field has been set.
func (o *TransactionModel) HasCardProductToken() bool {
	if o != nil && !IsNil(o.CardProductToken) {
		return true
	}

	return false
}

// SetCardProductToken gets a reference to the given string and assigns it to the CardProductToken field.
func (o *TransactionModel) SetCardProductToken(v string) {
	o.CardProductToken = &v
}

// GetCardSecurityCodeVerification returns the CardSecurityCodeVerification field value if set, zero value otherwise.
func (o *TransactionModel) GetCardSecurityCodeVerification() CardSecurityCodeVerification {
	if o == nil || IsNil(o.CardSecurityCodeVerification) {
		var ret CardSecurityCodeVerification
		return ret
	}
	return *o.CardSecurityCodeVerification
}

// GetCardSecurityCodeVerificationOk returns a tuple with the CardSecurityCodeVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCardSecurityCodeVerificationOk() (*CardSecurityCodeVerification, bool) {
	if o == nil || IsNil(o.CardSecurityCodeVerification) {
		return nil, false
	}
	return o.CardSecurityCodeVerification, true
}

// HasCardSecurityCodeVerification returns a boolean if a field has been set.
func (o *TransactionModel) HasCardSecurityCodeVerification() bool {
	if o != nil && !IsNil(o.CardSecurityCodeVerification) {
		return true
	}

	return false
}

// SetCardSecurityCodeVerification gets a reference to the given CardSecurityCodeVerification and assigns it to the CardSecurityCodeVerification field.
func (o *TransactionModel) SetCardSecurityCodeVerification(v CardSecurityCodeVerification) {
	o.CardSecurityCodeVerification = &v
}

// GetCardToken returns the CardToken field value if set, zero value otherwise.
func (o *TransactionModel) GetCardToken() string {
	if o == nil || IsNil(o.CardToken) {
		var ret string
		return ret
	}
	return *o.CardToken
}

// GetCardTokenOk returns a tuple with the CardToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCardTokenOk() (*string, bool) {
	if o == nil || IsNil(o.CardToken) {
		return nil, false
	}
	return o.CardToken, true
}

// HasCardToken returns a boolean if a field has been set.
func (o *TransactionModel) HasCardToken() bool {
	if o != nil && !IsNil(o.CardToken) {
		return true
	}

	return false
}

// SetCardToken gets a reference to the given string and assigns it to the CardToken field.
func (o *TransactionModel) SetCardToken(v string) {
	o.CardToken = &v
}

// GetCardholderAuthenticationData returns the CardholderAuthenticationData field value if set, zero value otherwise.
func (o *TransactionModel) GetCardholderAuthenticationData() CardholderAuthenticationData {
	if o == nil || IsNil(o.CardholderAuthenticationData) {
		var ret CardholderAuthenticationData
		return ret
	}
	return *o.CardholderAuthenticationData
}

// GetCardholderAuthenticationDataOk returns a tuple with the CardholderAuthenticationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCardholderAuthenticationDataOk() (*CardholderAuthenticationData, bool) {
	if o == nil || IsNil(o.CardholderAuthenticationData) {
		return nil, false
	}
	return o.CardholderAuthenticationData, true
}

// HasCardholderAuthenticationData returns a boolean if a field has been set.
func (o *TransactionModel) HasCardholderAuthenticationData() bool {
	if o != nil && !IsNil(o.CardholderAuthenticationData) {
		return true
	}

	return false
}

// SetCardholderAuthenticationData gets a reference to the given CardholderAuthenticationData and assigns it to the CardholderAuthenticationData field.
func (o *TransactionModel) SetCardholderAuthenticationData(v CardholderAuthenticationData) {
	o.CardholderAuthenticationData = &v
}

// GetCashBackAmount returns the CashBackAmount field value if set, zero value otherwise.
func (o *TransactionModel) GetCashBackAmount() decimal.Decimal {
	if o == nil || IsNil(o.CashBackAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.CashBackAmount
}

// GetCashBackAmountOk returns a tuple with the CashBackAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCashBackAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.CashBackAmount) {
		return nil, false
	}
	return o.CashBackAmount, true
}

// HasCashBackAmount returns a boolean if a field has been set.
func (o *TransactionModel) HasCashBackAmount() bool {
	if o != nil && !IsNil(o.CashBackAmount) {
		return true
	}

	return false
}

// SetCashBackAmount gets a reference to the given decimal.Decimal and assigns it to the CashBackAmount field.
func (o *TransactionModel) SetCashBackAmount(v decimal.Decimal) {
	o.CashBackAmount = &v
}

// GetChargeback returns the Chargeback field value if set, zero value otherwise.
func (o *TransactionModel) GetChargeback() ChargebackResponse {
	if o == nil || IsNil(o.Chargeback) {
		var ret ChargebackResponse
		return ret
	}
	return *o.Chargeback
}

// GetChargebackOk returns a tuple with the Chargeback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetChargebackOk() (*ChargebackResponse, bool) {
	if o == nil || IsNil(o.Chargeback) {
		return nil, false
	}
	return o.Chargeback, true
}

// HasChargeback returns a boolean if a field has been set.
func (o *TransactionModel) HasChargeback() bool {
	if o != nil && !IsNil(o.Chargeback) {
		return true
	}

	return false
}

// SetChargeback gets a reference to the given ChargebackResponse and assigns it to the Chargeback field.
func (o *TransactionModel) SetChargeback(v ChargebackResponse) {
	o.Chargeback = &v
}

// GetClearingRecordSequenceNumber returns the ClearingRecordSequenceNumber field value if set, zero value otherwise.
func (o *TransactionModel) GetClearingRecordSequenceNumber() string {
	if o == nil || IsNil(o.ClearingRecordSequenceNumber) {
		var ret string
		return ret
	}
	return *o.ClearingRecordSequenceNumber
}

// GetClearingRecordSequenceNumberOk returns a tuple with the ClearingRecordSequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetClearingRecordSequenceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ClearingRecordSequenceNumber) {
		return nil, false
	}
	return o.ClearingRecordSequenceNumber, true
}

// HasClearingRecordSequenceNumber returns a boolean if a field has been set.
func (o *TransactionModel) HasClearingRecordSequenceNumber() bool {
	if o != nil && !IsNil(o.ClearingRecordSequenceNumber) {
		return true
	}

	return false
}

// SetClearingRecordSequenceNumber gets a reference to the given string and assigns it to the ClearingRecordSequenceNumber field.
func (o *TransactionModel) SetClearingRecordSequenceNumber(v string) {
	o.ClearingRecordSequenceNumber = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *TransactionModel) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *TransactionModel) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *TransactionModel) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *TransactionModel) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *TransactionModel) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *TransactionModel) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencyConversion returns the CurrencyConversion field value if set, zero value otherwise.
func (o *TransactionModel) GetCurrencyConversion() CurrencyConversion {
	if o == nil || IsNil(o.CurrencyConversion) {
		var ret CurrencyConversion
		return ret
	}
	return *o.CurrencyConversion
}

// GetCurrencyConversionOk returns a tuple with the CurrencyConversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetCurrencyConversionOk() (*CurrencyConversion, bool) {
	if o == nil || IsNil(o.CurrencyConversion) {
		return nil, false
	}
	return o.CurrencyConversion, true
}

// HasCurrencyConversion returns a boolean if a field has been set.
func (o *TransactionModel) HasCurrencyConversion() bool {
	if o != nil && !IsNil(o.CurrencyConversion) {
		return true
	}

	return false
}

// SetCurrencyConversion gets a reference to the given CurrencyConversion and assigns it to the CurrencyConversion field.
func (o *TransactionModel) SetCurrencyConversion(v CurrencyConversion) {
	o.CurrencyConversion = &v
}

// GetDeferredSettlementDays returns the DeferredSettlementDays field value if set, zero value otherwise.
func (o *TransactionModel) GetDeferredSettlementDays() string {
	if o == nil || IsNil(o.DeferredSettlementDays) {
		var ret string
		return ret
	}
	return *o.DeferredSettlementDays
}

// GetDeferredSettlementDaysOk returns a tuple with the DeferredSettlementDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetDeferredSettlementDaysOk() (*string, bool) {
	if o == nil || IsNil(o.DeferredSettlementDays) {
		return nil, false
	}
	return o.DeferredSettlementDays, true
}

// HasDeferredSettlementDays returns a boolean if a field has been set.
func (o *TransactionModel) HasDeferredSettlementDays() bool {
	if o != nil && !IsNil(o.DeferredSettlementDays) {
		return true
	}

	return false
}

// SetDeferredSettlementDays gets a reference to the given string and assigns it to the DeferredSettlementDays field.
func (o *TransactionModel) SetDeferredSettlementDays(v string) {
	o.DeferredSettlementDays = &v
}

// GetDigitalWalletToken returns the DigitalWalletToken field value if set, zero value otherwise.
func (o *TransactionModel) GetDigitalWalletToken() DigitalWalletToken {
	if o == nil || IsNil(o.DigitalWalletToken) {
		var ret DigitalWalletToken
		return ret
	}
	return *o.DigitalWalletToken
}

// GetDigitalWalletTokenOk returns a tuple with the DigitalWalletToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetDigitalWalletTokenOk() (*DigitalWalletToken, bool) {
	if o == nil || IsNil(o.DigitalWalletToken) {
		return nil, false
	}
	return o.DigitalWalletToken, true
}

// HasDigitalWalletToken returns a boolean if a field has been set.
func (o *TransactionModel) HasDigitalWalletToken() bool {
	if o != nil && !IsNil(o.DigitalWalletToken) {
		return true
	}

	return false
}

// SetDigitalWalletToken gets a reference to the given DigitalWalletToken and assigns it to the DigitalWalletToken field.
func (o *TransactionModel) SetDigitalWalletToken(v DigitalWalletToken) {
	o.DigitalWalletToken = &v
}

// GetDigitalWalletTokenTransactionServiceProviderInfo returns the DigitalWalletTokenTransactionServiceProviderInfo field value if set, zero value otherwise.
func (o *TransactionModel) GetDigitalWalletTokenTransactionServiceProviderInfo() DigitalServiceProvider {
	if o == nil || IsNil(o.DigitalWalletTokenTransactionServiceProviderInfo) {
		var ret DigitalServiceProvider
		return ret
	}
	return *o.DigitalWalletTokenTransactionServiceProviderInfo
}

// GetDigitalWalletTokenTransactionServiceProviderInfoOk returns a tuple with the DigitalWalletTokenTransactionServiceProviderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetDigitalWalletTokenTransactionServiceProviderInfoOk() (*DigitalServiceProvider, bool) {
	if o == nil || IsNil(o.DigitalWalletTokenTransactionServiceProviderInfo) {
		return nil, false
	}
	return o.DigitalWalletTokenTransactionServiceProviderInfo, true
}

// HasDigitalWalletTokenTransactionServiceProviderInfo returns a boolean if a field has been set.
func (o *TransactionModel) HasDigitalWalletTokenTransactionServiceProviderInfo() bool {
	if o != nil && !IsNil(o.DigitalWalletTokenTransactionServiceProviderInfo) {
		return true
	}

	return false
}

// SetDigitalWalletTokenTransactionServiceProviderInfo gets a reference to the given DigitalServiceProvider and assigns it to the DigitalWalletTokenTransactionServiceProviderInfo field.
func (o *TransactionModel) SetDigitalWalletTokenTransactionServiceProviderInfo(v DigitalServiceProvider) {
	o.DigitalWalletTokenTransactionServiceProviderInfo = &v
}

// GetDirectDeposit returns the DirectDeposit field value if set, zero value otherwise.
func (o *TransactionModel) GetDirectDeposit() DepositDepositResponse {
	if o == nil || IsNil(o.DirectDeposit) {
		var ret DepositDepositResponse
		return ret
	}
	return *o.DirectDeposit
}

// GetDirectDepositOk returns a tuple with the DirectDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetDirectDepositOk() (*DepositDepositResponse, bool) {
	if o == nil || IsNil(o.DirectDeposit) {
		return nil, false
	}
	return o.DirectDeposit, true
}

// HasDirectDeposit returns a boolean if a field has been set.
func (o *TransactionModel) HasDirectDeposit() bool {
	if o != nil && !IsNil(o.DirectDeposit) {
		return true
	}

	return false
}

// SetDirectDeposit gets a reference to the given DepositDepositResponse and assigns it to the DirectDeposit field.
func (o *TransactionModel) SetDirectDeposit(v DepositDepositResponse) {
	o.DirectDeposit = &v
}

// GetDispute returns the Dispute field value if set, zero value otherwise.
func (o *TransactionModel) GetDispute() DisputeModel {
	if o == nil || IsNil(o.Dispute) {
		var ret DisputeModel
		return ret
	}
	return *o.Dispute
}

// GetDisputeOk returns a tuple with the Dispute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetDisputeOk() (*DisputeModel, bool) {
	if o == nil || IsNil(o.Dispute) {
		return nil, false
	}
	return o.Dispute, true
}

// HasDispute returns a boolean if a field has been set.
func (o *TransactionModel) HasDispute() bool {
	if o != nil && !IsNil(o.Dispute) {
		return true
	}

	return false
}

// SetDispute gets a reference to the given DisputeModel and assigns it to the Dispute field.
func (o *TransactionModel) SetDispute(v DisputeModel) {
	o.Dispute = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *TransactionModel) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *TransactionModel) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *TransactionModel) SetDuration(v int32) {
	o.Duration = &v
}

// GetEnhancedDataToken returns the EnhancedDataToken field value if set, zero value otherwise.
func (o *TransactionModel) GetEnhancedDataToken() string {
	if o == nil || IsNil(o.EnhancedDataToken) {
		var ret string
		return ret
	}
	return *o.EnhancedDataToken
}

// GetEnhancedDataTokenOk returns a tuple with the EnhancedDataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetEnhancedDataTokenOk() (*string, bool) {
	if o == nil || IsNil(o.EnhancedDataToken) {
		return nil, false
	}
	return o.EnhancedDataToken, true
}

// HasEnhancedDataToken returns a boolean if a field has been set.
func (o *TransactionModel) HasEnhancedDataToken() bool {
	if o != nil && !IsNil(o.EnhancedDataToken) {
		return true
	}

	return false
}

// SetEnhancedDataToken gets a reference to the given string and assigns it to the EnhancedDataToken field.
func (o *TransactionModel) SetEnhancedDataToken(v string) {
	o.EnhancedDataToken = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *TransactionModel) GetFee() Fee {
	if o == nil || IsNil(o.Fee) {
		var ret Fee
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetFeeOk() (*Fee, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *TransactionModel) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given Fee and assigns it to the Fee field.
func (o *TransactionModel) SetFee(v Fee) {
	o.Fee = &v
}

// GetFeeTransfer returns the FeeTransfer field value if set, zero value otherwise.
func (o *TransactionModel) GetFeeTransfer() FeeTransferResponse {
	if o == nil || IsNil(o.FeeTransfer) {
		var ret FeeTransferResponse
		return ret
	}
	return *o.FeeTransfer
}

// GetFeeTransferOk returns a tuple with the FeeTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetFeeTransferOk() (*FeeTransferResponse, bool) {
	if o == nil || IsNil(o.FeeTransfer) {
		return nil, false
	}
	return o.FeeTransfer, true
}

// HasFeeTransfer returns a boolean if a field has been set.
func (o *TransactionModel) HasFeeTransfer() bool {
	if o != nil && !IsNil(o.FeeTransfer) {
		return true
	}

	return false
}

// SetFeeTransfer gets a reference to the given FeeTransferResponse and assigns it to the FeeTransfer field.
func (o *TransactionModel) SetFeeTransfer(v FeeTransferResponse) {
	o.FeeTransfer = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *TransactionModel) GetFees() []NetworkFeeModel {
	if o == nil || IsNil(o.Fees) {
		var ret []NetworkFeeModel
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetFeesOk() ([]NetworkFeeModel, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *TransactionModel) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []NetworkFeeModel and assigns it to the Fees field.
func (o *TransactionModel) SetFees(v []NetworkFeeModel) {
	o.Fees = v
}

// GetFraud returns the Fraud field value if set, zero value otherwise.
func (o *TransactionModel) GetFraud() FraudView {
	if o == nil || IsNil(o.Fraud) {
		var ret FraudView
		return ret
	}
	return *o.Fraud
}

// GetFraudOk returns a tuple with the Fraud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetFraudOk() (*FraudView, bool) {
	if o == nil || IsNil(o.Fraud) {
		return nil, false
	}
	return o.Fraud, true
}

// HasFraud returns a boolean if a field has been set.
func (o *TransactionModel) HasFraud() bool {
	if o != nil && !IsNil(o.Fraud) {
		return true
	}

	return false
}

// SetFraud gets a reference to the given FraudView and assigns it to the Fraud field.
func (o *TransactionModel) SetFraud(v FraudView) {
	o.Fraud = &v
}

// GetFromAccount returns the FromAccount field value if set, zero value otherwise.
func (o *TransactionModel) GetFromAccount() string {
	if o == nil || IsNil(o.FromAccount) {
		var ret string
		return ret
	}
	return *o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetFromAccountOk() (*string, bool) {
	if o == nil || IsNil(o.FromAccount) {
		return nil, false
	}
	return o.FromAccount, true
}

// HasFromAccount returns a boolean if a field has been set.
func (o *TransactionModel) HasFromAccount() bool {
	if o != nil && !IsNil(o.FromAccount) {
		return true
	}

	return false
}

// SetFromAccount gets a reference to the given string and assigns it to the FromAccount field.
func (o *TransactionModel) SetFromAccount(v string) {
	o.FromAccount = &v
}

// GetGpa returns the Gpa field value if set, zero value otherwise.
func (o *TransactionModel) GetGpa() CardholderBalance {
	if o == nil || IsNil(o.Gpa) {
		var ret CardholderBalance
		return ret
	}
	return *o.Gpa
}

// GetGpaOk returns a tuple with the Gpa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetGpaOk() (*CardholderBalance, bool) {
	if o == nil || IsNil(o.Gpa) {
		return nil, false
	}
	return o.Gpa, true
}

// HasGpa returns a boolean if a field has been set.
func (o *TransactionModel) HasGpa() bool {
	if o != nil && !IsNil(o.Gpa) {
		return true
	}

	return false
}

// SetGpa gets a reference to the given CardholderBalance and assigns it to the Gpa field.
func (o *TransactionModel) SetGpa(v CardholderBalance) {
	o.Gpa = &v
}

// GetGpaOrder returns the GpaOrder field value if set, zero value otherwise.
func (o *TransactionModel) GetGpaOrder() GpaResponse {
	if o == nil || IsNil(o.GpaOrder) {
		var ret GpaResponse
		return ret
	}
	return *o.GpaOrder
}

// GetGpaOrderOk returns a tuple with the GpaOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetGpaOrderOk() (*GpaResponse, bool) {
	if o == nil || IsNil(o.GpaOrder) {
		return nil, false
	}
	return o.GpaOrder, true
}

// HasGpaOrder returns a boolean if a field has been set.
func (o *TransactionModel) HasGpaOrder() bool {
	if o != nil && !IsNil(o.GpaOrder) {
		return true
	}

	return false
}

// SetGpaOrder gets a reference to the given GpaResponse and assigns it to the GpaOrder field.
func (o *TransactionModel) SetGpaOrder(v GpaResponse) {
	o.GpaOrder = &v
}

// GetGpaOrderUnload returns the GpaOrderUnload field value if set, zero value otherwise.
func (o *TransactionModel) GetGpaOrderUnload() GpaReturns {
	if o == nil || IsNil(o.GpaOrderUnload) {
		var ret GpaReturns
		return ret
	}
	return *o.GpaOrderUnload
}

// GetGpaOrderUnloadOk returns a tuple with the GpaOrderUnload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetGpaOrderUnloadOk() (*GpaReturns, bool) {
	if o == nil || IsNil(o.GpaOrderUnload) {
		return nil, false
	}
	return o.GpaOrderUnload, true
}

// HasGpaOrderUnload returns a boolean if a field has been set.
func (o *TransactionModel) HasGpaOrderUnload() bool {
	if o != nil && !IsNil(o.GpaOrderUnload) {
		return true
	}

	return false
}

// SetGpaOrderUnload gets a reference to the given GpaReturns and assigns it to the GpaOrderUnload field.
func (o *TransactionModel) SetGpaOrderUnload(v GpaReturns) {
	o.GpaOrderUnload = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *TransactionModel) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *TransactionModel) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *TransactionModel) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetIncrementalAuthorizationTransactionTokens returns the IncrementalAuthorizationTransactionTokens field value if set, zero value otherwise.
func (o *TransactionModel) GetIncrementalAuthorizationTransactionTokens() []string {
	if o == nil || IsNil(o.IncrementalAuthorizationTransactionTokens) {
		var ret []string
		return ret
	}
	return o.IncrementalAuthorizationTransactionTokens
}

// GetIncrementalAuthorizationTransactionTokensOk returns a tuple with the IncrementalAuthorizationTransactionTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIncrementalAuthorizationTransactionTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.IncrementalAuthorizationTransactionTokens) {
		return nil, false
	}
	return o.IncrementalAuthorizationTransactionTokens, true
}

// HasIncrementalAuthorizationTransactionTokens returns a boolean if a field has been set.
func (o *TransactionModel) HasIncrementalAuthorizationTransactionTokens() bool {
	if o != nil && !IsNil(o.IncrementalAuthorizationTransactionTokens) {
		return true
	}

	return false
}

// SetIncrementalAuthorizationTransactionTokens gets a reference to the given []string and assigns it to the IncrementalAuthorizationTransactionTokens field.
func (o *TransactionModel) SetIncrementalAuthorizationTransactionTokens(v []string) {
	o.IncrementalAuthorizationTransactionTokens = v
}

// GetInterchangeRateDescriptor returns the InterchangeRateDescriptor field value if set, zero value otherwise.
func (o *TransactionModel) GetInterchangeRateDescriptor() string {
	if o == nil || IsNil(o.InterchangeRateDescriptor) {
		var ret string
		return ret
	}
	return *o.InterchangeRateDescriptor
}

// GetInterchangeRateDescriptorOk returns a tuple with the InterchangeRateDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetInterchangeRateDescriptorOk() (*string, bool) {
	if o == nil || IsNil(o.InterchangeRateDescriptor) {
		return nil, false
	}
	return o.InterchangeRateDescriptor, true
}

// HasInterchangeRateDescriptor returns a boolean if a field has been set.
func (o *TransactionModel) HasInterchangeRateDescriptor() bool {
	if o != nil && !IsNil(o.InterchangeRateDescriptor) {
		return true
	}

	return false
}

// SetInterchangeRateDescriptor gets a reference to the given string and assigns it to the InterchangeRateDescriptor field.
func (o *TransactionModel) SetInterchangeRateDescriptor(v string) {
	o.InterchangeRateDescriptor = &v
}

// GetIsFinalClearing returns the IsFinalClearing field value if set, zero value otherwise.
func (o *TransactionModel) GetIsFinalClearing() bool {
	if o == nil || IsNil(o.IsFinalClearing) {
		var ret bool
		return ret
	}
	return *o.IsFinalClearing
}

// GetIsFinalClearingOk returns a tuple with the IsFinalClearing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIsFinalClearingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFinalClearing) {
		return nil, false
	}
	return o.IsFinalClearing, true
}

// HasIsFinalClearing returns a boolean if a field has been set.
func (o *TransactionModel) HasIsFinalClearing() bool {
	if o != nil && !IsNil(o.IsFinalClearing) {
		return true
	}

	return false
}

// SetIsFinalClearing gets a reference to the given bool and assigns it to the IsFinalClearing field.
func (o *TransactionModel) SetIsFinalClearing(v bool) {
	o.IsFinalClearing = &v
}

// GetIsPreauthorization returns the IsPreauthorization field value if set, zero value otherwise.
func (o *TransactionModel) GetIsPreauthorization() bool {
	if o == nil || IsNil(o.IsPreauthorization) {
		var ret bool
		return ret
	}
	return *o.IsPreauthorization
}

// GetIsPreauthorizationOk returns a tuple with the IsPreauthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIsPreauthorizationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPreauthorization) {
		return nil, false
	}
	return o.IsPreauthorization, true
}

// HasIsPreauthorization returns a boolean if a field has been set.
func (o *TransactionModel) HasIsPreauthorization() bool {
	if o != nil && !IsNil(o.IsPreauthorization) {
		return true
	}

	return false
}

// SetIsPreauthorization gets a reference to the given bool and assigns it to the IsPreauthorization field.
func (o *TransactionModel) SetIsPreauthorization(v bool) {
	o.IsPreauthorization = &v
}

// GetIsaIndicator returns the IsaIndicator field value if set, zero value otherwise.
func (o *TransactionModel) GetIsaIndicator() string {
	if o == nil || IsNil(o.IsaIndicator) {
		var ret string
		return ret
	}
	return *o.IsaIndicator
}

// GetIsaIndicatorOk returns a tuple with the IsaIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIsaIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.IsaIndicator) {
		return nil, false
	}
	return o.IsaIndicator, true
}

// HasIsaIndicator returns a boolean if a field has been set.
func (o *TransactionModel) HasIsaIndicator() bool {
	if o != nil && !IsNil(o.IsaIndicator) {
		return true
	}

	return false
}

// SetIsaIndicator gets a reference to the given string and assigns it to the IsaIndicator field.
func (o *TransactionModel) SetIsaIndicator(v string) {
	o.IsaIndicator = &v
}

// GetIssuerInterchangeAmount returns the IssuerInterchangeAmount field value if set, zero value otherwise.
func (o *TransactionModel) GetIssuerInterchangeAmount() decimal.Decimal {
	if o == nil || IsNil(o.IssuerInterchangeAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.IssuerInterchangeAmount
}

// GetIssuerInterchangeAmountOk returns a tuple with the IssuerInterchangeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIssuerInterchangeAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.IssuerInterchangeAmount) {
		return nil, false
	}
	return o.IssuerInterchangeAmount, true
}

// HasIssuerInterchangeAmount returns a boolean if a field has been set.
func (o *TransactionModel) HasIssuerInterchangeAmount() bool {
	if o != nil && !IsNil(o.IssuerInterchangeAmount) {
		return true
	}

	return false
}

// SetIssuerInterchangeAmount gets a reference to the given decimal.Decimal and assigns it to the IssuerInterchangeAmount field.
func (o *TransactionModel) SetIssuerInterchangeAmount(v decimal.Decimal) {
	o.IssuerInterchangeAmount = &v
}

// GetIssuerPaymentNode returns the IssuerPaymentNode field value if set, zero value otherwise.
func (o *TransactionModel) GetIssuerPaymentNode() string {
	if o == nil || IsNil(o.IssuerPaymentNode) {
		var ret string
		return ret
	}
	return *o.IssuerPaymentNode
}

// GetIssuerPaymentNodeOk returns a tuple with the IssuerPaymentNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIssuerPaymentNodeOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerPaymentNode) {
		return nil, false
	}
	return o.IssuerPaymentNode, true
}

// HasIssuerPaymentNode returns a boolean if a field has been set.
func (o *TransactionModel) HasIssuerPaymentNode() bool {
	if o != nil && !IsNil(o.IssuerPaymentNode) {
		return true
	}

	return false
}

// SetIssuerPaymentNode gets a reference to the given string and assigns it to the IssuerPaymentNode field.
func (o *TransactionModel) SetIssuerPaymentNode(v string) {
	o.IssuerPaymentNode = &v
}

// GetIssuerReceivedTime returns the IssuerReceivedTime field value if set, zero value otherwise.
func (o *TransactionModel) GetIssuerReceivedTime() string {
	if o == nil || IsNil(o.IssuerReceivedTime) {
		var ret string
		return ret
	}
	return *o.IssuerReceivedTime
}

// GetIssuerReceivedTimeOk returns a tuple with the IssuerReceivedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIssuerReceivedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerReceivedTime) {
		return nil, false
	}
	return o.IssuerReceivedTime, true
}

// HasIssuerReceivedTime returns a boolean if a field has been set.
func (o *TransactionModel) HasIssuerReceivedTime() bool {
	if o != nil && !IsNil(o.IssuerReceivedTime) {
		return true
	}

	return false
}

// SetIssuerReceivedTime gets a reference to the given string and assigns it to the IssuerReceivedTime field.
func (o *TransactionModel) SetIssuerReceivedTime(v string) {
	o.IssuerReceivedTime = &v
}

// GetLocalTransactionDate returns the LocalTransactionDate field value if set, zero value otherwise.
func (o *TransactionModel) GetLocalTransactionDate() time.Time {
	if o == nil || IsNil(o.LocalTransactionDate) {
		var ret time.Time
		return ret
	}
	return *o.LocalTransactionDate
}

// GetLocalTransactionDateOk returns a tuple with the LocalTransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetLocalTransactionDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LocalTransactionDate) {
		return nil, false
	}
	return o.LocalTransactionDate, true
}

// HasLocalTransactionDate returns a boolean if a field has been set.
func (o *TransactionModel) HasLocalTransactionDate() bool {
	if o != nil && !IsNil(o.LocalTransactionDate) {
		return true
	}

	return false
}

// SetLocalTransactionDate gets a reference to the given time.Time and assigns it to the LocalTransactionDate field.
func (o *TransactionModel) SetLocalTransactionDate(v time.Time) {
	o.LocalTransactionDate = &v
}

// GetMerchant returns the Merchant field value if set, zero value otherwise.
func (o *TransactionModel) GetMerchant() MerchantResponseModel {
	if o == nil || IsNil(o.Merchant) {
		var ret MerchantResponseModel
		return ret
	}
	return *o.Merchant
}

// GetMerchantOk returns a tuple with the Merchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetMerchantOk() (*MerchantResponseModel, bool) {
	if o == nil || IsNil(o.Merchant) {
		return nil, false
	}
	return o.Merchant, true
}

// HasMerchant returns a boolean if a field has been set.
func (o *TransactionModel) HasMerchant() bool {
	if o != nil && !IsNil(o.Merchant) {
		return true
	}

	return false
}

// SetMerchant gets a reference to the given MerchantResponseModel and assigns it to the Merchant field.
func (o *TransactionModel) SetMerchant(v MerchantResponseModel) {
	o.Merchant = &v
}

// GetMerchantInitiatedOriginalTraceId returns the MerchantInitiatedOriginalTraceId field value if set, zero value otherwise.
func (o *TransactionModel) GetMerchantInitiatedOriginalTraceId() string {
	if o == nil || IsNil(o.MerchantInitiatedOriginalTraceId) {
		var ret string
		return ret
	}
	return *o.MerchantInitiatedOriginalTraceId
}

// GetMerchantInitiatedOriginalTraceIdOk returns a tuple with the MerchantInitiatedOriginalTraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetMerchantInitiatedOriginalTraceIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantInitiatedOriginalTraceId) {
		return nil, false
	}
	return o.MerchantInitiatedOriginalTraceId, true
}

// HasMerchantInitiatedOriginalTraceId returns a boolean if a field has been set.
func (o *TransactionModel) HasMerchantInitiatedOriginalTraceId() bool {
	if o != nil && !IsNil(o.MerchantInitiatedOriginalTraceId) {
		return true
	}

	return false
}

// SetMerchantInitiatedOriginalTraceId gets a reference to the given string and assigns it to the MerchantInitiatedOriginalTraceId field.
func (o *TransactionModel) SetMerchantInitiatedOriginalTraceId(v string) {
	o.MerchantInitiatedOriginalTraceId = &v
}

// GetMsaOrderUnload returns the MsaOrderUnload field value if set, zero value otherwise.
func (o *TransactionModel) GetMsaOrderUnload() MsaReturns {
	if o == nil || IsNil(o.MsaOrderUnload) {
		var ret MsaReturns
		return ret
	}
	return *o.MsaOrderUnload
}

// GetMsaOrderUnloadOk returns a tuple with the MsaOrderUnload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetMsaOrderUnloadOk() (*MsaReturns, bool) {
	if o == nil || IsNil(o.MsaOrderUnload) {
		return nil, false
	}
	return o.MsaOrderUnload, true
}

// HasMsaOrderUnload returns a boolean if a field has been set.
func (o *TransactionModel) HasMsaOrderUnload() bool {
	if o != nil && !IsNil(o.MsaOrderUnload) {
		return true
	}

	return false
}

// SetMsaOrderUnload gets a reference to the given MsaReturns and assigns it to the MsaOrderUnload field.
func (o *TransactionModel) SetMsaOrderUnload(v MsaReturns) {
	o.MsaOrderUnload = &v
}

// GetMultiClearingSequenceCount returns the MultiClearingSequenceCount field value if set, zero value otherwise.
func (o *TransactionModel) GetMultiClearingSequenceCount() string {
	if o == nil || IsNil(o.MultiClearingSequenceCount) {
		var ret string
		return ret
	}
	return *o.MultiClearingSequenceCount
}

// GetMultiClearingSequenceCountOk returns a tuple with the MultiClearingSequenceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetMultiClearingSequenceCountOk() (*string, bool) {
	if o == nil || IsNil(o.MultiClearingSequenceCount) {
		return nil, false
	}
	return o.MultiClearingSequenceCount, true
}

// HasMultiClearingSequenceCount returns a boolean if a field has been set.
func (o *TransactionModel) HasMultiClearingSequenceCount() bool {
	if o != nil && !IsNil(o.MultiClearingSequenceCount) {
		return true
	}

	return false
}

// SetMultiClearingSequenceCount gets a reference to the given string and assigns it to the MultiClearingSequenceCount field.
func (o *TransactionModel) SetMultiClearingSequenceCount(v string) {
	o.MultiClearingSequenceCount = &v
}

// GetMultiClearingSequenceNumber returns the MultiClearingSequenceNumber field value if set, zero value otherwise.
func (o *TransactionModel) GetMultiClearingSequenceNumber() string {
	if o == nil || IsNil(o.MultiClearingSequenceNumber) {
		var ret string
		return ret
	}
	return *o.MultiClearingSequenceNumber
}

// GetMultiClearingSequenceNumberOk returns a tuple with the MultiClearingSequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetMultiClearingSequenceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.MultiClearingSequenceNumber) {
		return nil, false
	}
	return o.MultiClearingSequenceNumber, true
}

// HasMultiClearingSequenceNumber returns a boolean if a field has been set.
func (o *TransactionModel) HasMultiClearingSequenceNumber() bool {
	if o != nil && !IsNil(o.MultiClearingSequenceNumber) {
		return true
	}

	return false
}

// SetMultiClearingSequenceNumber gets a reference to the given string and assigns it to the MultiClearingSequenceNumber field.
func (o *TransactionModel) SetMultiClearingSequenceNumber(v string) {
	o.MultiClearingSequenceNumber = &v
}

// GetNationalNetCpdOfOriginal returns the NationalNetCpdOfOriginal field value if set, zero value otherwise.
func (o *TransactionModel) GetNationalNetCpdOfOriginal() string {
	if o == nil || IsNil(o.NationalNetCpdOfOriginal) {
		var ret string
		return ret
	}
	return *o.NationalNetCpdOfOriginal
}

// GetNationalNetCpdOfOriginalOk returns a tuple with the NationalNetCpdOfOriginal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetNationalNetCpdOfOriginalOk() (*string, bool) {
	if o == nil || IsNil(o.NationalNetCpdOfOriginal) {
		return nil, false
	}
	return o.NationalNetCpdOfOriginal, true
}

// HasNationalNetCpdOfOriginal returns a boolean if a field has been set.
func (o *TransactionModel) HasNationalNetCpdOfOriginal() bool {
	if o != nil && !IsNil(o.NationalNetCpdOfOriginal) {
		return true
	}

	return false
}

// SetNationalNetCpdOfOriginal gets a reference to the given string and assigns it to the NationalNetCpdOfOriginal field.
func (o *TransactionModel) SetNationalNetCpdOfOriginal(v string) {
	o.NationalNetCpdOfOriginal = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *TransactionModel) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *TransactionModel) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *TransactionModel) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkMetadata returns the NetworkMetadata field value if set, zero value otherwise.
func (o *TransactionModel) GetNetworkMetadata() NetworkMetadata {
	if o == nil || IsNil(o.NetworkMetadata) {
		var ret NetworkMetadata
		return ret
	}
	return *o.NetworkMetadata
}

// GetNetworkMetadataOk returns a tuple with the NetworkMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetNetworkMetadataOk() (*NetworkMetadata, bool) {
	if o == nil || IsNil(o.NetworkMetadata) {
		return nil, false
	}
	return o.NetworkMetadata, true
}

// HasNetworkMetadata returns a boolean if a field has been set.
func (o *TransactionModel) HasNetworkMetadata() bool {
	if o != nil && !IsNil(o.NetworkMetadata) {
		return true
	}

	return false
}

// SetNetworkMetadata gets a reference to the given NetworkMetadata and assigns it to the NetworkMetadata field.
func (o *TransactionModel) SetNetworkMetadata(v NetworkMetadata) {
	o.NetworkMetadata = &v
}

// GetNetworkReferenceId returns the NetworkReferenceId field value if set, zero value otherwise.
func (o *TransactionModel) GetNetworkReferenceId() string {
	if o == nil || IsNil(o.NetworkReferenceId) {
		var ret string
		return ret
	}
	return *o.NetworkReferenceId
}

// GetNetworkReferenceIdOk returns a tuple with the NetworkReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetNetworkReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkReferenceId) {
		return nil, false
	}
	return o.NetworkReferenceId, true
}

// HasNetworkReferenceId returns a boolean if a field has been set.
func (o *TransactionModel) HasNetworkReferenceId() bool {
	if o != nil && !IsNil(o.NetworkReferenceId) {
		return true
	}

	return false
}

// SetNetworkReferenceId gets a reference to the given string and assigns it to the NetworkReferenceId field.
func (o *TransactionModel) SetNetworkReferenceId(v string) {
	o.NetworkReferenceId = &v
}

// GetOriginalCredit returns the OriginalCredit field value if set, zero value otherwise.
func (o *TransactionModel) GetOriginalCredit() OriginalCredit {
	if o == nil || IsNil(o.OriginalCredit) {
		var ret OriginalCredit
		return ret
	}
	return *o.OriginalCredit
}

// GetOriginalCreditOk returns a tuple with the OriginalCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetOriginalCreditOk() (*OriginalCredit, bool) {
	if o == nil || IsNil(o.OriginalCredit) {
		return nil, false
	}
	return o.OriginalCredit, true
}

// HasOriginalCredit returns a boolean if a field has been set.
func (o *TransactionModel) HasOriginalCredit() bool {
	if o != nil && !IsNil(o.OriginalCredit) {
		return true
	}

	return false
}

// SetOriginalCredit gets a reference to the given OriginalCredit and assigns it to the OriginalCredit field.
func (o *TransactionModel) SetOriginalCredit(v OriginalCredit) {
	o.OriginalCredit = &v
}

// GetPeerTransfer returns the PeerTransfer field value if set, zero value otherwise.
func (o *TransactionModel) GetPeerTransfer() PeerTransferResponse {
	if o == nil || IsNil(o.PeerTransfer) {
		var ret PeerTransferResponse
		return ret
	}
	return *o.PeerTransfer
}

// GetPeerTransferOk returns a tuple with the PeerTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetPeerTransferOk() (*PeerTransferResponse, bool) {
	if o == nil || IsNil(o.PeerTransfer) {
		return nil, false
	}
	return o.PeerTransfer, true
}

// HasPeerTransfer returns a boolean if a field has been set.
func (o *TransactionModel) HasPeerTransfer() bool {
	if o != nil && !IsNil(o.PeerTransfer) {
		return true
	}

	return false
}

// SetPeerTransfer gets a reference to the given PeerTransferResponse and assigns it to the PeerTransfer field.
func (o *TransactionModel) SetPeerTransfer(v PeerTransferResponse) {
	o.PeerTransfer = &v
}

// GetPolarity returns the Polarity field value if set, zero value otherwise.
func (o *TransactionModel) GetPolarity() string {
	if o == nil || IsNil(o.Polarity) {
		var ret string
		return ret
	}
	return *o.Polarity
}

// GetPolarityOk returns a tuple with the Polarity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetPolarityOk() (*string, bool) {
	if o == nil || IsNil(o.Polarity) {
		return nil, false
	}
	return o.Polarity, true
}

// HasPolarity returns a boolean if a field has been set.
func (o *TransactionModel) HasPolarity() bool {
	if o != nil && !IsNil(o.Polarity) {
		return true
	}

	return false
}

// SetPolarity gets a reference to the given string and assigns it to the Polarity field.
func (o *TransactionModel) SetPolarity(v string) {
	o.Polarity = &v
}

// GetPos returns the Pos field value if set, zero value otherwise.
func (o *TransactionModel) GetPos() Pos {
	if o == nil || IsNil(o.Pos) {
		var ret Pos
		return ret
	}
	return *o.Pos
}

// GetPosOk returns a tuple with the Pos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetPosOk() (*Pos, bool) {
	if o == nil || IsNil(o.Pos) {
		return nil, false
	}
	return o.Pos, true
}

// HasPos returns a boolean if a field has been set.
func (o *TransactionModel) HasPos() bool {
	if o != nil && !IsNil(o.Pos) {
		return true
	}

	return false
}

// SetPos gets a reference to the given Pos and assigns it to the Pos field.
func (o *TransactionModel) SetPos(v Pos) {
	o.Pos = &v
}

// GetPrecedingRelatedTransactionToken returns the PrecedingRelatedTransactionToken field value if set, zero value otherwise.
func (o *TransactionModel) GetPrecedingRelatedTransactionToken() string {
	if o == nil || IsNil(o.PrecedingRelatedTransactionToken) {
		var ret string
		return ret
	}
	return *o.PrecedingRelatedTransactionToken
}

// GetPrecedingRelatedTransactionTokenOk returns a tuple with the PrecedingRelatedTransactionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetPrecedingRelatedTransactionTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PrecedingRelatedTransactionToken) {
		return nil, false
	}
	return o.PrecedingRelatedTransactionToken, true
}

// HasPrecedingRelatedTransactionToken returns a boolean if a field has been set.
func (o *TransactionModel) HasPrecedingRelatedTransactionToken() bool {
	if o != nil && !IsNil(o.PrecedingRelatedTransactionToken) {
		return true
	}

	return false
}

// SetPrecedingRelatedTransactionToken gets a reference to the given string and assigns it to the PrecedingRelatedTransactionToken field.
func (o *TransactionModel) SetPrecedingRelatedTransactionToken(v string) {
	o.PrecedingRelatedTransactionToken = &v
}

// GetPrecedingTransaction returns the PrecedingTransaction field value if set, zero value otherwise.
func (o *TransactionModel) GetPrecedingTransaction() PrecedingTransaction {
	if o == nil || IsNil(o.PrecedingTransaction) {
		var ret PrecedingTransaction
		return ret
	}
	return *o.PrecedingTransaction
}

// GetPrecedingTransactionOk returns a tuple with the PrecedingTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetPrecedingTransactionOk() (*PrecedingTransaction, bool) {
	if o == nil || IsNil(o.PrecedingTransaction) {
		return nil, false
	}
	return o.PrecedingTransaction, true
}

// HasPrecedingTransaction returns a boolean if a field has been set.
func (o *TransactionModel) HasPrecedingTransaction() bool {
	if o != nil && !IsNil(o.PrecedingTransaction) {
		return true
	}

	return false
}

// SetPrecedingTransaction gets a reference to the given PrecedingTransaction and assigns it to the PrecedingTransaction field.
func (o *TransactionModel) SetPrecedingTransaction(v PrecedingTransaction) {
	o.PrecedingTransaction = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *TransactionModel) GetProgram() Program {
	if o == nil || IsNil(o.Program) {
		var ret Program
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetProgramOk() (*Program, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *TransactionModel) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given Program and assigns it to the Program field.
func (o *TransactionModel) SetProgram(v Program) {
	o.Program = &v
}

// GetProgramTransfer returns the ProgramTransfer field value if set, zero value otherwise.
func (o *TransactionModel) GetProgramTransfer() ProgramTransferResponse {
	if o == nil || IsNil(o.ProgramTransfer) {
		var ret ProgramTransferResponse
		return ret
	}
	return *o.ProgramTransfer
}

// GetProgramTransferOk returns a tuple with the ProgramTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetProgramTransferOk() (*ProgramTransferResponse, bool) {
	if o == nil || IsNil(o.ProgramTransfer) {
		return nil, false
	}
	return o.ProgramTransfer, true
}

// HasProgramTransfer returns a boolean if a field has been set.
func (o *TransactionModel) HasProgramTransfer() bool {
	if o != nil && !IsNil(o.ProgramTransfer) {
		return true
	}

	return false
}

// SetProgramTransfer gets a reference to the given ProgramTransferResponse and assigns it to the ProgramTransfer field.
func (o *TransactionModel) SetProgramTransfer(v ProgramTransferResponse) {
	o.ProgramTransfer = &v
}

// GetRealTimeFeeGroup returns the RealTimeFeeGroup field value if set, zero value otherwise.
func (o *TransactionModel) GetRealTimeFeeGroup() RealTimeFeeGroup {
	if o == nil || IsNil(o.RealTimeFeeGroup) {
		var ret RealTimeFeeGroup
		return ret
	}
	return *o.RealTimeFeeGroup
}

// GetRealTimeFeeGroupOk returns a tuple with the RealTimeFeeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetRealTimeFeeGroupOk() (*RealTimeFeeGroup, bool) {
	if o == nil || IsNil(o.RealTimeFeeGroup) {
		return nil, false
	}
	return o.RealTimeFeeGroup, true
}

// HasRealTimeFeeGroup returns a boolean if a field has been set.
func (o *TransactionModel) HasRealTimeFeeGroup() bool {
	if o != nil && !IsNil(o.RealTimeFeeGroup) {
		return true
	}

	return false
}

// SetRealTimeFeeGroup gets a reference to the given RealTimeFeeGroup and assigns it to the RealTimeFeeGroup field.
func (o *TransactionModel) SetRealTimeFeeGroup(v RealTimeFeeGroup) {
	o.RealTimeFeeGroup = &v
}

// GetRequestAmount returns the RequestAmount field value if set, zero value otherwise.
func (o *TransactionModel) GetRequestAmount() decimal.Decimal {
	if o == nil || IsNil(o.RequestAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.RequestAmount
}

// GetRequestAmountOk returns a tuple with the RequestAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetRequestAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.RequestAmount) {
		return nil, false
	}
	return o.RequestAmount, true
}

// HasRequestAmount returns a boolean if a field has been set.
func (o *TransactionModel) HasRequestAmount() bool {
	if o != nil && !IsNil(o.RequestAmount) {
		return true
	}

	return false
}

// SetRequestAmount gets a reference to the given decimal.Decimal and assigns it to the RequestAmount field.
func (o *TransactionModel) SetRequestAmount(v decimal.Decimal) {
	o.RequestAmount = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *TransactionModel) GetResponse() Response {
	if o == nil || IsNil(o.Response) {
		var ret Response
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetResponseOk() (*Response, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *TransactionModel) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given Response and assigns it to the Response field.
func (o *TransactionModel) SetResponse(v Response) {
	o.Response = &v
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise.
func (o *TransactionModel) GetSettlementDate() time.Time {
	if o == nil || IsNil(o.SettlementDate) {
		var ret time.Time
		return ret
	}
	return *o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetSettlementDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SettlementDate) {
		return nil, false
	}
	return o.SettlementDate, true
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *TransactionModel) HasSettlementDate() bool {
	if o != nil && !IsNil(o.SettlementDate) {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given time.Time and assigns it to the SettlementDate field.
func (o *TransactionModel) SetSettlementDate(v time.Time) {
	o.SettlementDate = &v
}

// GetSettlementIndicator returns the SettlementIndicator field value if set, zero value otherwise.
func (o *TransactionModel) GetSettlementIndicator() string {
	if o == nil || IsNil(o.SettlementIndicator) {
		var ret string
		return ret
	}
	return *o.SettlementIndicator
}

// GetSettlementIndicatorOk returns a tuple with the SettlementIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetSettlementIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementIndicator) {
		return nil, false
	}
	return o.SettlementIndicator, true
}

// HasSettlementIndicator returns a boolean if a field has been set.
func (o *TransactionModel) HasSettlementIndicator() bool {
	if o != nil && !IsNil(o.SettlementIndicator) {
		return true
	}

	return false
}

// SetSettlementIndicator gets a reference to the given string and assigns it to the SettlementIndicator field.
func (o *TransactionModel) SetSettlementIndicator(v string) {
	o.SettlementIndicator = &v
}

// GetStandinApprovedBy returns the StandinApprovedBy field value if set, zero value otherwise.
func (o *TransactionModel) GetStandinApprovedBy() string {
	if o == nil || IsNil(o.StandinApprovedBy) {
		var ret string
		return ret
	}
	return *o.StandinApprovedBy
}

// GetStandinApprovedByOk returns a tuple with the StandinApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetStandinApprovedByOk() (*string, bool) {
	if o == nil || IsNil(o.StandinApprovedBy) {
		return nil, false
	}
	return o.StandinApprovedBy, true
}

// HasStandinApprovedBy returns a boolean if a field has been set.
func (o *TransactionModel) HasStandinApprovedBy() bool {
	if o != nil && !IsNil(o.StandinApprovedBy) {
		return true
	}

	return false
}

// SetStandinApprovedBy gets a reference to the given string and assigns it to the StandinApprovedBy field.
func (o *TransactionModel) SetStandinApprovedBy(v string) {
	o.StandinApprovedBy = &v
}

// GetStandinBy returns the StandinBy field value if set, zero value otherwise.
func (o *TransactionModel) GetStandinBy() string {
	if o == nil || IsNil(o.StandinBy) {
		var ret string
		return ret
	}
	return *o.StandinBy
}

// GetStandinByOk returns a tuple with the StandinBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetStandinByOk() (*string, bool) {
	if o == nil || IsNil(o.StandinBy) {
		return nil, false
	}
	return o.StandinBy, true
}

// HasStandinBy returns a boolean if a field has been set.
func (o *TransactionModel) HasStandinBy() bool {
	if o != nil && !IsNil(o.StandinBy) {
		return true
	}

	return false
}

// SetStandinBy gets a reference to the given string and assigns it to the StandinBy field.
func (o *TransactionModel) SetStandinBy(v string) {
	o.StandinBy = &v
}

// GetStandinReason returns the StandinReason field value if set, zero value otherwise.
func (o *TransactionModel) GetStandinReason() string {
	if o == nil || IsNil(o.StandinReason) {
		var ret string
		return ret
	}
	return *o.StandinReason
}

// GetStandinReasonOk returns a tuple with the StandinReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetStandinReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StandinReason) {
		return nil, false
	}
	return o.StandinReason, true
}

// HasStandinReason returns a boolean if a field has been set.
func (o *TransactionModel) HasStandinReason() bool {
	if o != nil && !IsNil(o.StandinReason) {
		return true
	}

	return false
}

// SetStandinReason gets a reference to the given string and assigns it to the StandinReason field.
func (o *TransactionModel) SetStandinReason(v string) {
	o.StandinReason = &v
}

// GetState returns the State field value
func (o *TransactionModel) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *TransactionModel) SetState(v string) {
	o.State = v
}

// GetStore returns the Store field value if set, zero value otherwise.
func (o *TransactionModel) GetStore() StoreResponseModel {
	if o == nil || IsNil(o.Store) {
		var ret StoreResponseModel
		return ret
	}
	return *o.Store
}

// GetStoreOk returns a tuple with the Store field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetStoreOk() (*StoreResponseModel, bool) {
	if o == nil || IsNil(o.Store) {
		return nil, false
	}
	return o.Store, true
}

// HasStore returns a boolean if a field has been set.
func (o *TransactionModel) HasStore() bool {
	if o != nil && !IsNil(o.Store) {
		return true
	}

	return false
}

// SetStore gets a reference to the given StoreResponseModel and assigns it to the Store field.
func (o *TransactionModel) SetStore(v StoreResponseModel) {
	o.Store = &v
}

// GetSubnetwork returns the Subnetwork field value if set, zero value otherwise.
func (o *TransactionModel) GetSubnetwork() string {
	if o == nil || IsNil(o.Subnetwork) {
		var ret string
		return ret
	}
	return *o.Subnetwork
}

// GetSubnetworkOk returns a tuple with the Subnetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetSubnetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Subnetwork) {
		return nil, false
	}
	return o.Subnetwork, true
}

// HasSubnetwork returns a boolean if a field has been set.
func (o *TransactionModel) HasSubnetwork() bool {
	if o != nil && !IsNil(o.Subnetwork) {
		return true
	}

	return false
}

// SetSubnetwork gets a reference to the given string and assigns it to the Subnetwork field.
func (o *TransactionModel) SetSubnetwork(v string) {
	o.Subnetwork = &v
}

// GetToken returns the Token field value
func (o *TransactionModel) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *TransactionModel) SetToken(v string) {
	o.Token = v
}

// GetTransactionAttributes returns the TransactionAttributes field value if set, zero value otherwise.
func (o *TransactionModel) GetTransactionAttributes() map[string]string {
	if o == nil || IsNil(o.TransactionAttributes) {
		var ret map[string]string
		return ret
	}
	return *o.TransactionAttributes
}

// GetTransactionAttributesOk returns a tuple with the TransactionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetTransactionAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TransactionAttributes) {
		return nil, false
	}
	return o.TransactionAttributes, true
}

// HasTransactionAttributes returns a boolean if a field has been set.
func (o *TransactionModel) HasTransactionAttributes() bool {
	if o != nil && !IsNil(o.TransactionAttributes) {
		return true
	}

	return false
}

// SetTransactionAttributes gets a reference to the given map[string]string and assigns it to the TransactionAttributes field.
func (o *TransactionModel) SetTransactionAttributes(v map[string]string) {
	o.TransactionAttributes = &v
}

// GetTransactionMetadata returns the TransactionMetadata field value if set, zero value otherwise.
func (o *TransactionModel) GetTransactionMetadata() TransactionMetadata {
	if o == nil || IsNil(o.TransactionMetadata) {
		var ret TransactionMetadata
		return ret
	}
	return *o.TransactionMetadata
}

// GetTransactionMetadataOk returns a tuple with the TransactionMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetTransactionMetadataOk() (*TransactionMetadata, bool) {
	if o == nil || IsNil(o.TransactionMetadata) {
		return nil, false
	}
	return o.TransactionMetadata, true
}

// HasTransactionMetadata returns a boolean if a field has been set.
func (o *TransactionModel) HasTransactionMetadata() bool {
	if o != nil && !IsNil(o.TransactionMetadata) {
		return true
	}

	return false
}

// SetTransactionMetadata gets a reference to the given TransactionMetadata and assigns it to the TransactionMetadata field.
func (o *TransactionModel) SetTransactionMetadata(v TransactionMetadata) {
	o.TransactionMetadata = &v
}

// GetType returns the Type field value
func (o *TransactionModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransactionModel) SetType(v string) {
	o.Type = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *TransactionModel) GetUser() CardholderMetadata {
	if o == nil || IsNil(o.User) {
		var ret CardholderMetadata
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetUserOk() (*CardholderMetadata, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *TransactionModel) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CardholderMetadata and assigns it to the User field.
func (o *TransactionModel) SetUser(v CardholderMetadata) {
	o.User = &v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *TransactionModel) GetUserToken() string {
	if o == nil || IsNil(o.UserToken) {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetUserTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UserToken) {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *TransactionModel) HasUserToken() bool {
	if o != nil && !IsNil(o.UserToken) {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *TransactionModel) SetUserToken(v string) {
	o.UserToken = &v
}

// GetUserTransactionTime returns the UserTransactionTime field value if set, zero value otherwise.
func (o *TransactionModel) GetUserTransactionTime() time.Time {
	if o == nil || IsNil(o.UserTransactionTime) {
		var ret time.Time
		return ret
	}
	return *o.UserTransactionTime
}

// GetUserTransactionTimeOk returns a tuple with the UserTransactionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetUserTransactionTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UserTransactionTime) {
		return nil, false
	}
	return o.UserTransactionTime, true
}

// HasUserTransactionTime returns a boolean if a field has been set.
func (o *TransactionModel) HasUserTransactionTime() bool {
	if o != nil && !IsNil(o.UserTransactionTime) {
		return true
	}

	return false
}

// SetUserTransactionTime gets a reference to the given time.Time and assigns it to the UserTransactionTime field.
func (o *TransactionModel) SetUserTransactionTime(v time.Time) {
	o.UserTransactionTime = &v
}

func (o TransactionModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountFunding) {
		toSerialize["account_funding"] = o.AccountFunding
	}
	if !IsNil(o.AccountNameVerification) {
		toSerialize["account_name_verification"] = o.AccountNameVerification
	}
	if !IsNil(o.Acquirer) {
		toSerialize["acquirer"] = o.Acquirer
	}
	if !IsNil(o.AcquirerFeeAmount) {
		toSerialize["acquirer_fee_amount"] = o.AcquirerFeeAmount
	}
	if !IsNil(o.AcquirerReferenceData) {
		toSerialize["acquirer_reference_data"] = o.AcquirerReferenceData
	}
	if !IsNil(o.AcquirerReferenceId) {
		toSerialize["acquirer_reference_id"] = o.AcquirerReferenceId
	}
	toSerialize["acting_user_token"] = o.ActingUserToken
	if !IsNil(o.AddressVerification) {
		toSerialize["address_verification"] = o.AddressVerification
	}
	if !IsNil(o.AdviceReasonCode) {
		toSerialize["advice_reason_code"] = o.AdviceReasonCode
	}
	if !IsNil(o.AdviceReasonDetails) {
		toSerialize["advice_reason_details"] = o.AdviceReasonDetails
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.AmountToBeReleased) {
		toSerialize["amount_to_be_released"] = o.AmountToBeReleased
	}
	if !IsNil(o.ApprovalCode) {
		toSerialize["approval_code"] = o.ApprovalCode
	}
	if !IsNil(o.AtcInformation) {
		toSerialize["atc_information"] = o.AtcInformation
	}
	if !IsNil(o.AutoReload) {
		toSerialize["auto_reload"] = o.AutoReload
	}
	if !IsNil(o.BankTransferToken) {
		toSerialize["bank_transfer_token"] = o.BankTransferToken
	}
	if !IsNil(o.BatchNumber) {
		toSerialize["batch_number"] = o.BatchNumber
	}
	if !IsNil(o.Billpay) {
		toSerialize["billpay"] = o.Billpay
	}
	if !IsNil(o.Business) {
		toSerialize["business"] = o.Business
	}
	if !IsNil(o.BusinessToken) {
		toSerialize["business_token"] = o.BusinessToken
	}
	if !IsNil(o.Card) {
		toSerialize["card"] = o.Card
	}
	if !IsNil(o.CardAcceptor) {
		toSerialize["card_acceptor"] = o.CardAcceptor
	}
	if !IsNil(o.CardHolderModel) {
		toSerialize["card_holder_model"] = o.CardHolderModel
	}
	if !IsNil(o.CardProductToken) {
		toSerialize["card_product_token"] = o.CardProductToken
	}
	if !IsNil(o.CardSecurityCodeVerification) {
		toSerialize["card_security_code_verification"] = o.CardSecurityCodeVerification
	}
	if !IsNil(o.CardToken) {
		toSerialize["card_token"] = o.CardToken
	}
	if !IsNil(o.CardholderAuthenticationData) {
		toSerialize["cardholder_authentication_data"] = o.CardholderAuthenticationData
	}
	if !IsNil(o.CashBackAmount) {
		toSerialize["cash_back_amount"] = o.CashBackAmount
	}
	if !IsNil(o.Chargeback) {
		toSerialize["chargeback"] = o.Chargeback
	}
	if !IsNil(o.ClearingRecordSequenceNumber) {
		toSerialize["clearing_record_sequence_number"] = o.ClearingRecordSequenceNumber
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencyConversion) {
		toSerialize["currency_conversion"] = o.CurrencyConversion
	}
	if !IsNil(o.DeferredSettlementDays) {
		toSerialize["deferred_settlement_days"] = o.DeferredSettlementDays
	}
	if !IsNil(o.DigitalWalletToken) {
		toSerialize["digital_wallet_token"] = o.DigitalWalletToken
	}
	if !IsNil(o.DigitalWalletTokenTransactionServiceProviderInfo) {
		toSerialize["digital_wallet_token_transaction_service_provider_info"] = o.DigitalWalletTokenTransactionServiceProviderInfo
	}
	if !IsNil(o.DirectDeposit) {
		toSerialize["direct_deposit"] = o.DirectDeposit
	}
	if !IsNil(o.Dispute) {
		toSerialize["dispute"] = o.Dispute
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.EnhancedDataToken) {
		toSerialize["enhanced_data_token"] = o.EnhancedDataToken
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.FeeTransfer) {
		toSerialize["fee_transfer"] = o.FeeTransfer
	}
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.Fraud) {
		toSerialize["fraud"] = o.Fraud
	}
	if !IsNil(o.FromAccount) {
		toSerialize["from_account"] = o.FromAccount
	}
	if !IsNil(o.Gpa) {
		toSerialize["gpa"] = o.Gpa
	}
	if !IsNil(o.GpaOrder) {
		toSerialize["gpa_order"] = o.GpaOrder
	}
	if !IsNil(o.GpaOrderUnload) {
		toSerialize["gpa_order_unload"] = o.GpaOrderUnload
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.IncrementalAuthorizationTransactionTokens) {
		toSerialize["incremental_authorization_transaction_tokens"] = o.IncrementalAuthorizationTransactionTokens
	}
	if !IsNil(o.InterchangeRateDescriptor) {
		toSerialize["interchange_rate_descriptor"] = o.InterchangeRateDescriptor
	}
	if !IsNil(o.IsFinalClearing) {
		toSerialize["is_final_clearing"] = o.IsFinalClearing
	}
	if !IsNil(o.IsPreauthorization) {
		toSerialize["is_preauthorization"] = o.IsPreauthorization
	}
	if !IsNil(o.IsaIndicator) {
		toSerialize["isaIndicator"] = o.IsaIndicator
	}
	if !IsNil(o.IssuerInterchangeAmount) {
		toSerialize["issuer_interchange_amount"] = o.IssuerInterchangeAmount
	}
	if !IsNil(o.IssuerPaymentNode) {
		toSerialize["issuer_payment_node"] = o.IssuerPaymentNode
	}
	if !IsNil(o.IssuerReceivedTime) {
		toSerialize["issuer_received_time"] = o.IssuerReceivedTime
	}
	if !IsNil(o.LocalTransactionDate) {
		toSerialize["local_transaction_date"] = o.LocalTransactionDate
	}
	if !IsNil(o.Merchant) {
		toSerialize["merchant"] = o.Merchant
	}
	if !IsNil(o.MerchantInitiatedOriginalTraceId) {
		toSerialize["merchant_initiated_original_trace_id"] = o.MerchantInitiatedOriginalTraceId
	}
	if !IsNil(o.MsaOrderUnload) {
		toSerialize["msa_order_unload"] = o.MsaOrderUnload
	}
	if !IsNil(o.MultiClearingSequenceCount) {
		toSerialize["multi_clearing_sequence_count"] = o.MultiClearingSequenceCount
	}
	if !IsNil(o.MultiClearingSequenceNumber) {
		toSerialize["multi_clearing_sequence_number"] = o.MultiClearingSequenceNumber
	}
	if !IsNil(o.NationalNetCpdOfOriginal) {
		toSerialize["national_net_cpd_of_original"] = o.NationalNetCpdOfOriginal
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkMetadata) {
		toSerialize["network_metadata"] = o.NetworkMetadata
	}
	if !IsNil(o.NetworkReferenceId) {
		toSerialize["network_reference_id"] = o.NetworkReferenceId
	}
	if !IsNil(o.OriginalCredit) {
		toSerialize["original_credit"] = o.OriginalCredit
	}
	if !IsNil(o.PeerTransfer) {
		toSerialize["peer_transfer"] = o.PeerTransfer
	}
	if !IsNil(o.Polarity) {
		toSerialize["polarity"] = o.Polarity
	}
	if !IsNil(o.Pos) {
		toSerialize["pos"] = o.Pos
	}
	if !IsNil(o.PrecedingRelatedTransactionToken) {
		toSerialize["preceding_related_transaction_token"] = o.PrecedingRelatedTransactionToken
	}
	if !IsNil(o.PrecedingTransaction) {
		toSerialize["preceding_transaction"] = o.PrecedingTransaction
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ProgramTransfer) {
		toSerialize["program_transfer"] = o.ProgramTransfer
	}
	if !IsNil(o.RealTimeFeeGroup) {
		toSerialize["real_time_fee_group"] = o.RealTimeFeeGroup
	}
	if !IsNil(o.RequestAmount) {
		toSerialize["request_amount"] = o.RequestAmount
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.SettlementDate) {
		toSerialize["settlement_date"] = o.SettlementDate
	}
	if !IsNil(o.SettlementIndicator) {
		toSerialize["settlement_indicator"] = o.SettlementIndicator
	}
	if !IsNil(o.StandinApprovedBy) {
		toSerialize["standin_approved_by"] = o.StandinApprovedBy
	}
	if !IsNil(o.StandinBy) {
		toSerialize["standin_by"] = o.StandinBy
	}
	if !IsNil(o.StandinReason) {
		toSerialize["standin_reason"] = o.StandinReason
	}
	toSerialize["state"] = o.State
	if !IsNil(o.Store) {
		toSerialize["store"] = o.Store
	}
	if !IsNil(o.Subnetwork) {
		toSerialize["subnetwork"] = o.Subnetwork
	}
	toSerialize["token"] = o.Token
	if !IsNil(o.TransactionAttributes) {
		toSerialize["transaction_attributes"] = o.TransactionAttributes
	}
	if !IsNil(o.TransactionMetadata) {
		toSerialize["transaction_metadata"] = o.TransactionMetadata
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserToken) {
		toSerialize["user_token"] = o.UserToken
	}
	if !IsNil(o.UserTransactionTime) {
		toSerialize["user_transaction_time"] = o.UserTransactionTime
	}
	return toSerialize, nil
}

func (o *TransactionModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		//"acting_user_token",
		"amount",
		"state",
		"token",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionModel := _TransactionModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionModel)

	if err != nil {
		return err
	}

	*o = TransactionModel(varTransactionModel)

	return err
}

type NullableTransactionModel struct {
	value *TransactionModel
	isSet bool
}

func (v NullableTransactionModel) Get() *TransactionModel {
	return v.value
}

func (v *NullableTransactionModel) Set(val *TransactionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionModel(val *TransactionModel) *NullableTransactionModel {
	return &NullableTransactionModel{value: val, isSet: true}
}

func (v NullableTransactionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


