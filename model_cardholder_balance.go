/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
	"github.com/shopspring/decimal"
)

// checks if the CardholderBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardholderBalance{}

// CardholderBalance Returns general purpose account (GPA) balances for a user or business.
type CardholderBalance struct {
	// Ledger balance minus any authorized transactions that have not yet cleared. Also known as the cardholder's purchasing power. When using JIT Funding, this balance is usually equal to $0.00.
	AvailableBalance decimal.Decimal `json:"available_balance"`
	// Contains GPA balance information, organized by currency code.
	Balances map[string]CardholderBalance `json:"balances"`
	// Not currently in use.
	CachedBalance decimal.Decimal `json:"cached_balance"`
	// Not currently in use.
	CreditBalance decimal.Decimal `json:"credit_balance"`
	// Three-digit ISO 4217 currency code.
	CurrencyCode string `json:"currency_code"`
	// Balance change based on the amount of the transaction.
	ImpactedAmount *decimal.Decimal `json:"impacted_amount,omitempty"`
	// Date and time when the resource was last updated, in UTC.
	LastUpdatedTime time.Time `json:"last_updated_time"`
	// When using standard funding: The funds that are available to spend immediately, including funds from any authorized transactions that have not yet cleared. When using Just-in-Time (JIT) Funding: Authorized funds that are currently on hold, but not yet cleared.
	LedgerBalance decimal.Decimal `json:"ledger_balance"`
	// ACH loads that have been accepted, but for which the funding time has not yet elapsed.
	PendingCredits decimal.Decimal `json:"pending_credits"`
}

type _CardholderBalance CardholderBalance

// NewCardholderBalance instantiates a new CardholderBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardholderBalance(availableBalance decimal.Decimal, balances map[string]CardholderBalance, cachedBalance decimal.Decimal, creditBalance decimal.Decimal, currencyCode string, lastUpdatedTime time.Time, ledgerBalance decimal.Decimal, pendingCredits decimal.Decimal) *CardholderBalance {
	this := CardholderBalance{}
	this.AvailableBalance = availableBalance
	this.Balances = balances
	this.CachedBalance = cachedBalance
	this.CreditBalance = creditBalance
	this.CurrencyCode = currencyCode
	this.LastUpdatedTime = lastUpdatedTime
	this.LedgerBalance = ledgerBalance
	this.PendingCredits = pendingCredits
	return &this
}

// NewCardholderBalanceWithDefaults instantiates a new CardholderBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardholderBalanceWithDefaults() *CardholderBalance {
	this := CardholderBalance{}
	return &this
}

// GetAvailableBalance returns the AvailableBalance field value
func (o *CardholderBalance) GetAvailableBalance() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetAvailableBalanceOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableBalance, true
}

// SetAvailableBalance sets field value
func (o *CardholderBalance) SetAvailableBalance(v decimal.Decimal) {
	o.AvailableBalance = v
}

// GetBalances returns the Balances field value
func (o *CardholderBalance) GetBalances() map[string]CardholderBalance {
	if o == nil {
		var ret map[string]CardholderBalance
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetBalancesOk() (*map[string]CardholderBalance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balances, true
}

// SetBalances sets field value
func (o *CardholderBalance) SetBalances(v map[string]CardholderBalance) {
	o.Balances = v
}

// GetCachedBalance returns the CachedBalance field value
func (o *CardholderBalance) GetCachedBalance() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.CachedBalance
}

// GetCachedBalanceOk returns a tuple with the CachedBalance field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetCachedBalanceOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CachedBalance, true
}

// SetCachedBalance sets field value
func (o *CardholderBalance) SetCachedBalance(v decimal.Decimal) {
	o.CachedBalance = v
}

// GetCreditBalance returns the CreditBalance field value
func (o *CardholderBalance) GetCreditBalance() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.CreditBalance
}

// GetCreditBalanceOk returns a tuple with the CreditBalance field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetCreditBalanceOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditBalance, true
}

// SetCreditBalance sets field value
func (o *CardholderBalance) SetCreditBalance(v decimal.Decimal) {
	o.CreditBalance = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *CardholderBalance) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *CardholderBalance) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetImpactedAmount returns the ImpactedAmount field value if set, zero value otherwise.
func (o *CardholderBalance) GetImpactedAmount() decimal.Decimal {
	if o == nil || IsNil(o.ImpactedAmount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.ImpactedAmount
}

// GetImpactedAmountOk returns a tuple with the ImpactedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetImpactedAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.ImpactedAmount) {
		return nil, false
	}
	return o.ImpactedAmount, true
}

// HasImpactedAmount returns a boolean if a field has been set.
func (o *CardholderBalance) HasImpactedAmount() bool {
	if o != nil && !IsNil(o.ImpactedAmount) {
		return true
	}

	return false
}

// SetImpactedAmount gets a reference to the given decimal.Decimal and assigns it to the ImpactedAmount field.
func (o *CardholderBalance) SetImpactedAmount(v decimal.Decimal) {
	o.ImpactedAmount = &v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value
func (o *CardholderBalance) GetLastUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedTime, true
}

// SetLastUpdatedTime sets field value
func (o *CardholderBalance) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = v
}

// GetLedgerBalance returns the LedgerBalance field value
func (o *CardholderBalance) GetLedgerBalance() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.LedgerBalance
}

// GetLedgerBalanceOk returns a tuple with the LedgerBalance field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetLedgerBalanceOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerBalance, true
}

// SetLedgerBalance sets field value
func (o *CardholderBalance) SetLedgerBalance(v decimal.Decimal) {
	o.LedgerBalance = v
}

// GetPendingCredits returns the PendingCredits field value
func (o *CardholderBalance) GetPendingCredits() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.PendingCredits
}

// GetPendingCreditsOk returns a tuple with the PendingCredits field value
// and a boolean to check if the value has been set.
func (o *CardholderBalance) GetPendingCreditsOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingCredits, true
}

// SetPendingCredits sets field value
func (o *CardholderBalance) SetPendingCredits(v decimal.Decimal) {
	o.PendingCredits = v
}

func (o CardholderBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardholderBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available_balance"] = o.AvailableBalance
	toSerialize["balances"] = o.Balances
	toSerialize["cached_balance"] = o.CachedBalance
	toSerialize["credit_balance"] = o.CreditBalance
	toSerialize["currency_code"] = o.CurrencyCode
	if !IsNil(o.ImpactedAmount) {
		toSerialize["impacted_amount"] = o.ImpactedAmount
	}
	toSerialize["last_updated_time"] = o.LastUpdatedTime
	toSerialize["ledger_balance"] = o.LedgerBalance
	toSerialize["pending_credits"] = o.PendingCredits
	return toSerialize, nil
}

func (o *CardholderBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		// "available_balance",
		// "balances",
		// "cached_balance",
		// "credit_balance",
		// "currency_code",
		// "last_updated_time",
		// "ledger_balance",
		// "pending_credits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCardholderBalance := _CardholderBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCardholderBalance)

	if err != nil {
		return err
	}

	*o = CardholderBalance(varCardholderBalance)

	return err
}

type NullableCardholderBalance struct {
	value *CardholderBalance
	isSet bool
}

func (v NullableCardholderBalance) Get() *CardholderBalance {
	return v.value
}

func (v *NullableCardholderBalance) Set(val *CardholderBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableCardholderBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableCardholderBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardholderBalance(val *CardholderBalance) *NullableCardholderBalance {
	return &NullableCardholderBalance{value: val, isSet: true}
}

func (v NullableCardholderBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardholderBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


