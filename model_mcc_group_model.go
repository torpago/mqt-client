/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MccGroupModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MccGroupModel{}

// MccGroupModel struct for MccGroupModel
type MccGroupModel struct {
	// Indicates if the group is active or inactive.
	Active *bool `json:"active,omitempty"`
	Config *Config `json:"config,omitempty"`
	// The set of merchant category codes that you want to include in this group. For each element, valid characters are 0-9, and the length must be 4 digits. You can also specify a range like \"9876-9880\". An MCC can belong to more than one group.
	Mccs []string `json:"mccs"`
	// The name of the group.
	Name string `json:"name"`
	// The unique identifier of the group.  If you do not include a token, the system will generate one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
	Token *string `json:"token,omitempty"`
}

type _MccGroupModel MccGroupModel

// NewMccGroupModel instantiates a new MccGroupModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMccGroupModel(mccs []string, name string) *MccGroupModel {
	this := MccGroupModel{}
	var active bool = false
	this.Active = &active
	this.Mccs = mccs
	this.Name = name
	return &this
}

// NewMccGroupModelWithDefaults instantiates a new MccGroupModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMccGroupModelWithDefaults() *MccGroupModel {
	this := MccGroupModel{}
	var active bool = false
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *MccGroupModel) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MccGroupModel) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *MccGroupModel) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *MccGroupModel) SetActive(v bool) {
	o.Active = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *MccGroupModel) GetConfig() Config {
	if o == nil || IsNil(o.Config) {
		var ret Config
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MccGroupModel) GetConfigOk() (*Config, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *MccGroupModel) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given Config and assigns it to the Config field.
func (o *MccGroupModel) SetConfig(v Config) {
	o.Config = &v
}

// GetMccs returns the Mccs field value
func (o *MccGroupModel) GetMccs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Mccs
}

// GetMccsOk returns a tuple with the Mccs field value
// and a boolean to check if the value has been set.
func (o *MccGroupModel) GetMccsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mccs, true
}

// SetMccs sets field value
func (o *MccGroupModel) SetMccs(v []string) {
	o.Mccs = v
}

// GetName returns the Name field value
func (o *MccGroupModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MccGroupModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MccGroupModel) SetName(v string) {
	o.Name = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *MccGroupModel) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MccGroupModel) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *MccGroupModel) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *MccGroupModel) SetToken(v string) {
	o.Token = &v
}

func (o MccGroupModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MccGroupModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	toSerialize["mccs"] = o.Mccs
	toSerialize["name"] = o.Name
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

func (o *MccGroupModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mccs",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMccGroupModel := _MccGroupModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMccGroupModel)

	if err != nil {
		return err
	}

	*o = MccGroupModel(varMccGroupModel)

	return err
}

type NullableMccGroupModel struct {
	value *MccGroupModel
	isSet bool
}

func (v NullableMccGroupModel) Get() *MccGroupModel {
	return v.value
}

func (v *NullableMccGroupModel) Set(val *MccGroupModel) {
	v.value = val
	v.isSet = true
}

func (v NullableMccGroupModel) IsSet() bool {
	return v.isSet
}

func (v *NullableMccGroupModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMccGroupModel(val *MccGroupModel) *NullableMccGroupModel {
	return &NullableMccGroupModel{value: val, isSet: true}
}

func (v NullableMccGroupModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMccGroupModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


